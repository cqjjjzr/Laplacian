package org.ffmpeg.avutil55;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavutil\spherical.h:31</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVSphericalMapping extends Structure {
	/**
	 * @see AVSphericalProjection<br>
	 * C type : AVSphericalProjection
	 */
	public int projection;
	/** < Rotation around the up vector [-180, 180]. */
	public int yaw;
	/** < Rotation around the right vector [-90, 90]. */
	public int pitch;
	/** < Rotation around the forward vector [-180, 180]. */
	public int roll;
	/** < Distance from the left edge */
	public int bound_left;
	/** < Distance from the top edge */
	public int bound_top;
	/** < Distance from the right edge */
	public int bound_right;
	/** < Distance from the bottom edge */
	public int bound_bottom;
	public int padding;
	public AVSphericalMapping() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("projection", "yaw", "pitch", "roll", "bound_left", "bound_top", "bound_right", "bound_bottom", "padding");
	}
	/**
	 * @param projection @see AVSphericalProjection<br>
	 * C type : AVSphericalProjection<br>
	 * @param yaw < Rotation around the up vector [-180, 180].<br>
	 * @param pitch < Rotation around the right vector [-90, 90].<br>
	 * @param roll < Rotation around the forward vector [-180, 180].<br>
	 * @param bound_left < Distance from the left edge<br>
	 * @param bound_top < Distance from the top edge<br>
	 * @param bound_right < Distance from the right edge<br>
	 * @param bound_bottom < Distance from the bottom edge
	 */
	public AVSphericalMapping(int projection, int yaw, int pitch, int roll, int bound_left, int bound_top, int bound_right, int bound_bottom, int padding) {
		super();
		this.projection = projection;
		this.yaw = yaw;
		this.pitch = pitch;
		this.roll = roll;
		this.bound_left = bound_left;
		this.bound_top = bound_top;
		this.bound_right = bound_right;
		this.bound_bottom = bound_bottom;
		this.padding = padding;
	}
	public AVSphericalMapping(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVSphericalMapping implements Structure.ByReference {
		
	};
	public static class ByValue extends AVSphericalMapping implements Structure.ByValue {
		
	};
}
