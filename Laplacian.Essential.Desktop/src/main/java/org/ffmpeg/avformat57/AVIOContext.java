package org.ffmpeg.avformat57;
import com.sun.jna.Callback;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavformat\avio.h:127</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVIOContext extends Structure {
	/** C type : const AVClass* */
	public Pointer av_class;
	/**
	 * < Start of the buffer.<br>
	 * C type : unsigned char*
	 */
	public Pointer buffer;
	/** < Maximum buffer size */
	public int buffer_size;
	/**
	 * < Current position in the buffer<br>
	 * C type : unsigned char*
	 */
	public Pointer buf_ptr;
	/**
	 * < End of the data, may be less than<br>
	 * buffer+buffer_size if the read function returned<br>
	 * less data than requested, e.g. for streams where<br>
	 * no more data has been received yet.<br>
	 * C type : unsigned char*
	 */
	public Pointer buf_end;
	/**
	 * < A private pointer, passed to the read/write/seek/...<br>
	 * functions.<br>
	 * C type : void*
	 */
	public Pointer opaque;
	/** C type : read_packet_callback* */
	public Callback read_packet;
	/** C type : write_packet_callback* */
	public Callback write_packet;
	/** C type : seek_callback* */
	public Callback seek;
	/** < position in the file of the current buffer */
	public long pos;
	/** < true if the next seek should flush */
	public int must_flush;
	/** < true if eof reached */
	public int eof_reached;
	/** < true if open for writing */
	public int write_flag;
	public int max_packet_size;
	public NativeLong checksum;
	/** C type : unsigned char* */
	public Pointer checksum_ptr;
	/** C type : update_checksum_callback* */
	public update_checksum_callback update_checksum;
	/** < contains the error code or 0 if no error happened */
	public int error;
	/** C type : read_pause_callback* */
	public org.ffmpeg.avformat57.AVInputFormat.read_pause_callback read_pause;
	/** C type : read_seek_callback* */
	public org.ffmpeg.avformat57.AVInputFormat.read_seek_callback read_seek;
	public int seekable;
	public long maxsize;
	public int direct;
	public long bytes_read;
	public int seek_count;
	public int writeout_count;
	public int orig_buffer_size;
	public int short_seek_threshold;
	/** C type : const char* */
	public Pointer protocol_whitelist;
	/** C type : const char* */
	public Pointer protocol_blacklist;
	/** C type : write_data_type_callback* */
	public write_data_type_callback write_data_type;
	public int ignore_boundary_point;
	/**
	 * @see AVIODataMarkerType<br>
	 * C type : AVIODataMarkerType
	 */
	public int current_type;
	public long last_time;
	/** C type : short_seek_get_callback* */
	public short_seek_get_callback short_seek_get;
	/** <i>native declaration : libavformat\avio.h:115</i> */
	public interface read_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/** <i>native declaration : libavformat\avio.h:116</i> */
	public interface write_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/** <i>native declaration : libavformat\avio.h:117</i> */
	public interface seek_callback extends Callback {
		long apply(Pointer opaque, long offset, int whence);
	};
	/** <i>native declaration : libavformat\avio.h:118</i> */
	public interface update_checksum_callback extends Callback {
		NativeLong apply(NativeLong checksum, Pointer buf, int size);
	};
	/** <i>native declaration : libavformat\avio.h:119</i> */
	public interface read_pause_callback extends Callback {
		int apply(Pointer opaque, int pause);
	};
	/** <i>native declaration : libavformat\avio.h:120</i> */
	public interface read_seek_callback extends Callback {
		long apply(Pointer opaque, int stream_index, long timestamp, int flags);
	};
	/** <i>native declaration : libavformat\avio.h:123</i> */
	public interface write_data_type_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size, int type, long time);
	};
	/** <i>native declaration : libavformat\avio.h:126</i> */
	public interface short_seek_get_callback extends Callback {
		int apply(Pointer opaque);
	};
	public AVIOContext() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("av_class", "buffer", "buffer_size", "buf_ptr", "buf_end", "opaque", "read_packet", "write_packet", "seek", "pos", "must_flush", "eof_reached", "write_flag", "max_packet_size", "checksum", "checksum_ptr", "update_checksum", "error", "read_pause", "read_seek", "seekable", "maxsize", "direct", "bytes_read", "seek_count", "writeout_count", "orig_buffer_size", "short_seek_threshold", "protocol_whitelist", "protocol_blacklist", "write_data_type", "ignore_boundary_point", "current_type", "last_time", "short_seek_get");
	}
	public AVIOContext(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVIOContext implements Structure.ByReference {
		
	};
	public static class ByValue extends AVIOContext implements Structure.ByValue {
		
	};
}
