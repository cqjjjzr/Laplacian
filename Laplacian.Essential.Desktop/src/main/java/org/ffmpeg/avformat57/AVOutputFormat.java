package org.ffmpeg.avformat57;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import org.ffmpeg.avcodec57.AVPacket;
import org.ffmpeg.avdevice57.AVDeviceCapabilitiesQuery;
import org.ffmpeg.avdevice57.AVDeviceInfoList;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavformat\avformat.h:108</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVOutputFormat extends Structure {
	/** C type : const char* */
	public Pointer name;
	/** C type : const char* */
	public Pointer long_name;
	/** C type : const char* */
	public Pointer mime_type;
	/**
	 * < comma-separated filename extensions<br>
	 * C type : const char*
	 */
	public Pointer extensions;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * < default audio codec<br>
	 * C type : AVCodecID
	 */
	public int audio_codec;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * < default video codec<br>
	 * C type : AVCodecID
	 */
	public int video_codec;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * < default subtitle codec<br>
	 * C type : AVCodecID
	 */
	public int subtitle_codec;
	public int flags;
	/** C type : AVCodecTag** */
	public org.ffmpeg.avformat57.AVCodecTag.ByReference[] codec_tag;
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	public Pointer priv_class;
	/** C type : AVOutputFormat* */
	public ByReference next;
	public int priv_data_size;
	/** C type : write_header_callback* */
	public write_header_callback write_header;
	/** C type : write_packet_callback* */
	public write_packet_callback write_packet;
	/** C type : write_trailer_callback* */
	public write_trailer_callback write_trailer;
	/** C type : interleave_packet_callback* */
	public interleave_packet_callback interleave_packet;
	/** C type : query_codec_callback* */
	public query_codec_callback query_codec;
	/** C type : get_output_timestamp_callback* */
	public get_output_timestamp_callback get_output_timestamp;
	/** C type : control_message_callback* */
	public control_message_callback control_message;
	/** C type : write_uncoded_frame_callback* */
	public write_uncoded_frame_callback write_uncoded_frame;
	/** C type : get_device_list_callback* */
	public org.ffmpeg.avformat57.AVInputFormat.get_device_list_callback get_device_list;
	/** C type : create_device_capabilities_callback* */
	public org.ffmpeg.avformat57.AVInputFormat.create_device_capabilities_callback create_device_capabilities;
	/** C type : free_device_capabilities_callback* */
	public org.ffmpeg.avformat57.AVInputFormat.free_device_capabilities_callback free_device_capabilities;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * < default data codec<br>
	 * C type : AVCodecID
	 */
	public int data_codec;
	/** C type : init_callback* */
	public org.ffmpeg.avfilter6.AVFilter.init_callback init;
	/** C type : deinit_callback* */
	public deinit_callback deinit;
	/** C type : check_bitstream_callback* */
	public check_bitstream_callback check_bitstream;
	/** <i>native declaration : libavformat\avformat.h:90</i> */
	public interface write_header_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:91</i> */
	public interface write_packet_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, AVPacket pkt);
	};
	/** <i>native declaration : libavformat\avformat.h:92</i> */
	public interface write_trailer_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:93</i> */
	public interface interleave_packet_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, AVPacket out, AVPacket in, int flush);
	};
	/** <i>native declaration : libavformat\avformat.h:96</i> */
	public interface query_codec_callback extends Callback {
		int apply(int id, int std_compliance);
	};
	/** <i>native declaration : libavformat\avformat.h:97</i> */
	public interface get_output_timestamp_callback extends Callback {
		void apply(AVFormatContext s, int stream, LongByReference dts, LongByReference wall);
	};
	/** <i>native declaration : libavformat\avformat.h:98</i> */
	public interface control_message_callback extends Callback {
		int apply(AVFormatContext s, int type, Pointer data, NativeSize data_size);
	};
	/** <i>native declaration : libavformat\avformat.h:99</i> */
	public interface write_uncoded_frame_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, int stream_index, PointerByReference frame, int flags);
	};
	/** <i>native declaration : libavformat\avformat.h:100</i> */
	public interface get_device_list_callback extends Callback {
		int apply(AVFormatContext s, AVDeviceInfoList device_list);
	};
	/** <i>native declaration : libavformat\avformat.h:101</i> */
	public interface create_device_capabilities_callback extends Callback {
		int apply(AVFormatContext s, AVDeviceCapabilitiesQuery caps);
	};
	/** <i>native declaration : libavformat\avformat.h:102</i> */
	public interface free_device_capabilities_callback extends Callback {
		int apply(AVFormatContext s, AVDeviceCapabilitiesQuery caps);
	};
	/** <i>native declaration : libavformat\avformat.h:105</i> */
	public interface init_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:106</i> */
	public interface deinit_callback extends Callback {
		void apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:107</i> */
	public interface check_bitstream_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, AVPacket pkt);
	};
	public AVOutputFormat() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "long_name", "mime_type", "extensions", "audio_codec", "video_codec", "subtitle_codec", "flags", "codec_tag", "priv_class", "next", "priv_data_size", "write_header", "write_packet", "write_trailer", "interleave_packet", "query_codec", "get_output_timestamp", "control_message", "write_uncoded_frame", "get_device_list", "create_device_capabilities", "free_device_capabilities", "data_codec", "init", "deinit", "check_bitstream");
	}
	public AVOutputFormat(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVOutputFormat implements Structure.ByReference {
		
	};
	public static class ByValue extends AVOutputFormat implements Structure.ByValue {
		
	};
}
