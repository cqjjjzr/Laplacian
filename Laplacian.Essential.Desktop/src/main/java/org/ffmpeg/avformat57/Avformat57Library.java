package org.ffmpeg.avformat57;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.*;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import org.ffmpeg.avcodec57.*;
import org.ffmpeg.avutil55.AVFrame;
import org.ffmpeg.avutil55.AVRational.ByValue;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>avformat-57</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Avformat57Library extends Library {
	public static final String JNA_LIBRARY_NAME = "avformat-57";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Avformat57Library.JNA_LIBRARY_NAME);
	public static final Avformat57Library INSTANCE = (Avformat57Library)Native.loadLibrary(Avformat57Library.JNA_LIBRARY_NAME, Avformat57Library.class);
	/**
	 * Directory entry types.<br>
	 * <i>native declaration : libavformat\avio.h:28</i><br>
	 * enum values
	 */
	public static interface AVIODirEntryType {
		/** <i>native declaration : libavformat\avio.h:17</i> */
		public static final int AVIO_ENTRY_UNKNOWN = 0;
		/** <i>native declaration : libavformat\avio.h:18</i> */
		public static final int AVIO_ENTRY_BLOCK_DEVICE = 1;
		/** <i>native declaration : libavformat\avio.h:19</i> */
		public static final int AVIO_ENTRY_CHARACTER_DEVICE = 2;
		/** <i>native declaration : libavformat\avio.h:20</i> */
		public static final int AVIO_ENTRY_DIRECTORY = 3;
		/** <i>native declaration : libavformat\avio.h:21</i> */
		public static final int AVIO_ENTRY_NAMED_PIPE = 4;
		/** <i>native declaration : libavformat\avio.h:22</i> */
		public static final int AVIO_ENTRY_SYMBOLIC_LINK = 5;
		/** <i>native declaration : libavformat\avio.h:23</i> */
		public static final int AVIO_ENTRY_SOCKET = 6;
		/** <i>native declaration : libavformat\avio.h:24</i> */
		public static final int AVIO_ENTRY_FILE = 7;
		/** <i>native declaration : libavformat\avio.h:25</i> */
		public static final int AVIO_ENTRY_SERVER = 8;
		/** <i>native declaration : libavformat\avio.h:26</i> */
		public static final int AVIO_ENTRY_SHARE = 9;
		/** <i>native declaration : libavformat\avio.h:27</i> */
		public static final int AVIO_ENTRY_WORKGROUP = 10;
	};
	/**
	 * Different data types that can be returned via the AVIO<br>
	 * write_data_type callback.<br>
	 * <i>native declaration : libavformat\avio.h:63</i><br>
	 * enum values
	 */
	public static interface AVIODataMarkerType {
		/** <i>native declaration : libavformat\avio.h:58</i> */
		public static final int AVIO_DATA_MARKER_HEADER = 0;
		/** <i>native declaration : libavformat\avio.h:59</i> */
		public static final int AVIO_DATA_MARKER_SYNC_POINT = 1;
		/** <i>native declaration : libavformat\avio.h:60</i> */
		public static final int AVIO_DATA_MARKER_BOUNDARY_POINT = 2;
		/** <i>native declaration : libavformat\avio.h:61</i> */
		public static final int AVIO_DATA_MARKER_UNKNOWN = 3;
		/** <i>native declaration : libavformat\avio.h:62</i> */
		public static final int AVIO_DATA_MARKER_TRAILER = 4;
	};
	/**
	 * @}<br>
	 * <i>native declaration : libavformat\avformat.h:160</i><br>
	 * enum values
	 */
	public static interface AVStreamParseType {
		/** <i>native declaration : libavformat\avformat.h:152</i> */
		public static final int AVSTREAM_PARSE_NONE = 0;
		/**
		 * < full parsing and repack<br>
		 * <i>native declaration : libavformat\avformat.h:153</i>
		 */
		public static final int AVSTREAM_PARSE_FULL = 1;
		/**
		 * < Only parse headers, do not repack.<br>
		 * <i>native declaration : libavformat\avformat.h:154</i>
		 */
		public static final int AVSTREAM_PARSE_HEADERS = 2;
		/**
		 * < full parsing and interpolation of timestamps for frames not starting on a packet boundary<br>
		 * <i>native declaration : libavformat\avformat.h:155</i>
		 */
		public static final int AVSTREAM_PARSE_TIMESTAMPS = 3;
		/**
		 * < full parsing and repack of the first frame only, only implemented for H.264 currently<br>
		 * <i>native declaration : libavformat\avformat.h:156</i>
		 */
		public static final int AVSTREAM_PARSE_FULL_ONCE = 4;
		/**
		 * < full parsing and repack with timestamp and position generation by parser for raw<br>
		 * this assumes that each packet in the file contains no demuxer level headers and<br>
		 * just codec level data, otherwise position generation would fail<br>
		 * <i>native declaration : libavformat\avformat.h:159</i>
		 */
		public static final int AVSTREAM_PARSE_FULL_RAW = ((0) | (('R') << 8) | (('A') << 16) | (('W') << 24));
	};
	/**
	 * The duration of a video can be estimated through various ways, and this enum can be used<br>
	 * to know how the duration was estimated.<br>
	 * <i>native declaration : libavformat\avformat.h:339</i><br>
	 * enum values
	 */
	public static interface AVDurationEstimationMethod {
		/**
		 * < Duration accurately estimated from PTSes<br>
		 * <i>native declaration : libavformat\avformat.h:334</i>
		 */
		public static final int AVFMT_DURATION_FROM_PTS = 0;
		/**
		 * < Duration estimated from a stream with a known duration<br>
		 * <i>native declaration : libavformat\avformat.h:336</i>
		 */
		public static final int AVFMT_DURATION_FROM_STREAM = 1;
		/**
		 * < Duration estimated from bitrate (less accurate)<br>
		 * <i>native declaration : libavformat\avformat.h:338</i>
		 */
		public static final int AVFMT_DURATION_FROM_BITRATE = 2;
	};
	/**
	 * <i>native declaration : libavformat\avformat.h:1307</i><br>
	 * enum values
	 */
	public static interface AVTimebaseSource {
		/** <i>native declaration : libavformat\avformat.h:1303</i> */
		public static final int AVFMT_TBCF_AUTO = -1;
		/** <i>native declaration : libavformat\avformat.h:1304</i> */
		public static final int AVFMT_TBCF_DECODER = 0;
		/** <i>native declaration : libavformat\avformat.h:1305</i> */
		public static final int AVFMT_TBCF_DEMUXER = 1;
		/** <i>native declaration : libavformat\avformat.h:1306</i> */
		public static final int AVFMT_TBCF_R_FRAMERATE = 2;
	};
	/**
	 * Conversion Error : a.num<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil\rational.h:0</i><br>
	 * const int64_t tmp = a.num * (int64_t)b.den - b.num * (int64_t)a.den;
	 */
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MAJOR = (int)57;
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MINOR = (int)71;
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final int LIBAVFORMAT_VERSION_MICRO = (int)100;
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final int LIBAVFORMAT_VERSION_INT = (int)((57) << 16 | (71) << 8 | (100));
	/**
	 * define<br>
	 * Conversion Error : 57.71.<br>
	 * SKIPPED:<br>
	 * <i>native declaration : .\libavformat\version.h:0</i><br>
	 * 57.71.
	 */
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final int LIBAVFORMAT_BUILD = (int)((57) << 16 | (71) << 8 | (100));
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final String LIBAVFORMAT_IDENT = (String)"Lavf57.71.100";
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_LAVF_BITEXACT = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_LAVF_FRAC = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_LAVF_CODEC_TB = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_URL_FEOF = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_LAVF_FMT_RAWPICTURE = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_COMPUTE_PKT_FIELDS2 = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_OLD_OPEN_CALLBACKS = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_LAVF_AVCTX = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_NOCONST_GET_SIDE_DATA = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_HTTP_USER_AGENT = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_HLS_WRAP = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_LAVF_MERGE_SD = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_LAVF_KEEPSIDE_FLAG = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final boolean FF_API_OLD_ROTATE_API = (boolean)(57 < 58);
	/** <i>native declaration : .\libavformat\version.h</i> */
	public static final int FF_API_R_FRAME_RATE = (int)1;
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVIO_SEEKABLE_NORMAL = (int)(1 << 0);
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVIO_SEEKABLE_TIME = (int)(1 << 1);
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVSEEK_SIZE = (int)0x10000;
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVSEEK_FORCE = (int)0x20000;
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVIO_FLAG_READ = (int)1;
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVIO_FLAG_WRITE = (int)2;
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVIO_FLAG_READ_WRITE = (int)(1 | 2);
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVIO_FLAG_NONBLOCK = (int)8;
	/** <i>native declaration : libavformat\avio.h</i> */
	public static final int AVIO_FLAG_DIRECT = (int)0x8000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVPROBE_SCORE_RETRY = (int)(100 / 4);
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVPROBE_SCORE_STREAM_RETRY = (int)(100 / 4 - 1);
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVPROBE_SCORE_EXTENSION = (int)50;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVPROBE_SCORE_MIME = (int)75;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVPROBE_SCORE_MAX = (int)100;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVPROBE_PADDING_SIZE = (int)32;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NOFILE = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NEEDNUMBER = (int)0x0002;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_SHOW_IDS = (int)0x0008;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_RAWPICTURE = (int)0x0020;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_GLOBALHEADER = (int)0x0040;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NOTIMESTAMPS = (int)0x0080;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_GENERIC_INDEX = (int)0x0100;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_TS_DISCONT = (int)0x0200;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_VARIABLE_FPS = (int)0x0400;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NODIMENSIONS = (int)0x0800;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NOSTREAMS = (int)0x1000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NOBINSEARCH = (int)0x2000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NOGENSEARCH = (int)0x4000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_NO_BYTE_SEEK = (int)0x8000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_ALLOW_FLUSH = (int)0x10000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_TS_NONSTRICT = (int)0x20000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_TS_NEGATIVE = (int)0x40000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_SEEK_TO_PTS = (int)0x4000000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVINDEX_KEYFRAME = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVINDEX_DISCARD_FRAME = (int)0x0002;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_DEFAULT = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_DUB = (int)0x0002;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_ORIGINAL = (int)0x0004;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_COMMENT = (int)0x0008;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_LYRICS = (int)0x0010;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_KARAOKE = (int)0x0020;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_FORCED = (int)0x0040;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_HEARING_IMPAIRED = (int)0x0080;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_VISUAL_IMPAIRED = (int)0x0100;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_CLEAN_EFFECTS = (int)0x0200;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_ATTACHED_PIC = (int)0x0400;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_TIMED_THUMBNAILS = (int)0x0800;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_CAPTIONS = (int)0x10000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_DESCRIPTIONS = (int)0x20000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_DISPOSITION_METADATA = (int)0x40000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_PTS_WRAP_IGNORE = (int)0;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_PTS_WRAP_ADD_OFFSET = (int)1;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_PTS_WRAP_SUB_OFFSET = (int)-1;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVSTREAM_EVENT_FLAG_METADATA_UPDATED = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int MAX_STD_TIMEBASES = (int)(30 * 12 + 30 + 3 + 6);
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int MAX_REORDER_DELAY = (int)16;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_PROGRAM_RUNNING = (int)1;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMTCTX_NOHEADER = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_GENPTS = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_IGNIDX = (int)0x0002;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_NONBLOCK = (int)0x0004;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_IGNDTS = (int)0x0008;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_NOFILLIN = (int)0x0010;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_NOPARSE = (int)0x0020;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_NOBUFFER = (int)0x0040;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_CUSTOM_IO = (int)0x0080;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_DISCARD_CORRUPT = (int)0x0100;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_FLUSH_PACKETS = (int)0x0200;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_BITEXACT = (int)0x0400;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_MP4A_LATM = (int)0x8000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_SORT_DTS = (int)0x10000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_PRIV_OPT = (int)0x20000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_KEEP_SIDE_DATA = (int)0x40000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_FAST_SEEK = (int)0x80000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_SHORTEST = (int)0x100000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_FLAG_AUTO_BSF = (int)0x200000;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int FF_FDEBUG_TS = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_EVENT_FLAG_METADATA_UPDATED = (int)0x0001;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_AVOID_NEG_TS_AUTO = (int)-1;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_AVOID_NEG_TS_MAKE_NON_NEGATIVE = (int)1;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVFMT_AVOID_NEG_TS_MAKE_ZERO = (int)2;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVSEEK_FLAG_BACKWARD = (int)1;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVSEEK_FLAG_BYTE = (int)2;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVSEEK_FLAG_ANY = (int)4;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVSEEK_FLAG_FRAME = (int)8;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVSTREAM_INIT_IN_WRITE_HEADER = (int)0;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AVSTREAM_INIT_IN_INIT_OUTPUT = (int)1;
	/** <i>native declaration : libavformat\avformat.h</i> */
	public static final int AV_FRAME_FILENAME_FLAGS_MULTIPLE = (int)1;
	/** <i>native declaration : libavformat\avio.h:539</i> */
	public interface avio_alloc_context_read_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/** <i>native declaration : libavformat\avio.h:540</i> */
	public interface avio_alloc_context_write_packet_callback extends Callback {
		int apply(Pointer opaque, Pointer buf, int buf_size);
	};
	/** <i>native declaration : libavformat\avio.h:541</i> */
	public interface avio_alloc_context_seek_callback extends Callback {
		long apply(Pointer opaque, long offset, int whence);
	};
	/** <i>native declaration : libavformat\avformat.h:326</i> */
	public interface av_format_control_message extends Callback {
		int apply(AVFormatContext s, int type, Pointer data, NativeSize data_size);
	};
	/** <i>native declaration : libavformat\avformat.h:327</i> */
	public interface AVOpenCallback extends Callback {
		int apply(AVFormatContext s, PointerByReference pb, Pointer url, int flags, AVIOInterruptCB int_cb, PointerByReference options);
	};
	/**
	 * Return the name of the protocol that will handle the passed URL.<br>
	 * NULL is returned if no protocol could be found for the given URL.<br>
	 * @return Name of the protocol or NULL.<br>
	 * Original signature : <code>char* avio_find_protocol_name(const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:134</i><br>
	 * @deprecated use the safer methods {@link #avio_find_protocol_name(String)} and {@link #avio_find_protocol_name(Pointer)} instead
	 */
	@Deprecated 
	String avio_find_protocol_name(Pointer url);
	/**
	 * Return the name of the protocol that will handle the passed URL.<br>
	 * NULL is returned if no protocol could be found for the given URL.<br>
	 * @return Name of the protocol or NULL.<br>
	 * Original signature : <code>char* avio_find_protocol_name(const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:134</i>
	 */
	String avio_find_protocol_name(String url);
	/**
	 * Return AVIO_FLAG_* access flags corresponding to the access permissions<br>
	 * of the resource in url, or a negative value corresponding to an<br>
	 * AVERROR code in case of failure. The returned access flags are<br>
	 * masked by the value in flags.<br>
	 * @note This function is intrinsically unsafe, in the sense that the<br>
	 * checked resource may change its existence or permission status from<br>
	 * one call to another. Thus you should not trust the returned value,<br>
	 * unless you are sure that no other processes are accessing the<br>
	 * checked resource.<br>
	 * Original signature : <code>int avio_check(const char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:147</i><br>
	 * @deprecated use the safer methods {@link #avio_check(String, int)} and {@link #avio_check(Pointer, int)} instead
	 */
	@Deprecated 
	int avio_check(Pointer url, int flags);
	/**
	 * Return AVIO_FLAG_* access flags corresponding to the access permissions<br>
	 * of the resource in url, or a negative value corresponding to an<br>
	 * AVERROR code in case of failure. The returned access flags are<br>
	 * masked by the value in flags.<br>
	 * @note This function is intrinsically unsafe, in the sense that the<br>
	 * checked resource may change its existence or permission status from<br>
	 * one call to another. Thus you should not trust the returned value,<br>
	 * unless you are sure that no other processes are accessing the<br>
	 * checked resource.<br>
	 * Original signature : <code>int avio_check(const char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:147</i>
	 */
	int avio_check(String url, int flags);
	/**
	 * Move or rename a resource.<br>
	 * @note url_src and url_dst should share the same protocol and authority.<br>
	 * @param url_src url to resource to be moved<br>
	 * @param url_dst new url to resource if the operation succeeded<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avpriv_io_move(const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:156</i><br>
	 * @deprecated use the safer methods {@link #avpriv_io_move(String, String)} and {@link #avpriv_io_move(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int avpriv_io_move(Pointer url_src, Pointer url_dst);
	/**
	 * Move or rename a resource.<br>
	 * @note url_src and url_dst should share the same protocol and authority.<br>
	 * @param url_src url to resource to be moved<br>
	 * @param url_dst new url to resource if the operation succeeded<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avpriv_io_move(const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:156</i>
	 */
	int avpriv_io_move(String url_src, String url_dst);
	/**
	 * Delete a resource.<br>
	 * @param url resource to be deleted.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avpriv_io_delete(const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:163</i><br>
	 * @deprecated use the safer methods {@link #avpriv_io_delete(String)} and {@link #avpriv_io_delete(Pointer)} instead
	 */
	@Deprecated 
	int avpriv_io_delete(Pointer url);
	/**
	 * Delete a resource.<br>
	 * @param url resource to be deleted.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avpriv_io_delete(const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:163</i>
	 */
	int avpriv_io_delete(String url);
	/**
	 * Open directory for reading.<br>
	 * @param s       directory read context. Pointer to a NULL pointer must be passed.<br>
	 * @param url     directory to be listed.<br>
	 * @param options A dictionary filled with protocol-private options. On return<br>
	 *                this parameter will be destroyed and replaced with a dictionary<br>
	 *                containing options that were not found. May be NULL.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avio_open_dir(AVIODirContext**, const char*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avio.h:174</i><br>
	 * @deprecated use the safer methods {@link #avio_open_dir(org.ffmpeg.avformat57.AVIODirContext.ByReference[], String, org.ffmpeg.avutil55.AVDictionary.ByReference[])} and {@link #avio_open_dir(org.ffmpeg.avformat57.AVIODirContext.ByReference[], Pointer, org.ffmpeg.avutil55.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avio_open_dir(PointerByReference s, Pointer url, PointerByReference options);
	/**
	 * Open directory for reading.<br>
	 * @param s       directory read context. Pointer to a NULL pointer must be passed.<br>
	 * @param url     directory to be listed.<br>
	 * @param options A dictionary filled with protocol-private options. On return<br>
	 *                this parameter will be destroyed and replaced with a dictionary<br>
	 *                containing options that were not found. May be NULL.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avio_open_dir(AVIODirContext**, const char*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avio.h:174</i>
	 */
	int avio_open_dir(AVIODirContext.ByReference s[], String url, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Open directory for reading.<br>
	 * @param s       directory read context. Pointer to a NULL pointer must be passed.<br>
	 * @param url     directory to be listed.<br>
	 * @param options A dictionary filled with protocol-private options. On return<br>
	 *                this parameter will be destroyed and replaced with a dictionary<br>
	 *                containing options that were not found. May be NULL.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avio_open_dir(AVIODirContext**, const char*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avio.h:174</i>
	 */
	int avio_open_dir(AVIODirContext.ByReference s[], Pointer url, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Get next directory entry.<br>
	 * Returned entry must be freed with avio_free_directory_entry(). In particular<br>
	 * it may outlive AVIODirContext.<br>
	 * @param s         directory read context.<br>
	 * @param[out] next next entry or NULL when no more entries.<br>
	 * @return >=0 on success or negative on error. End of list is not considered an<br>
	 *             error.<br>
	 * Original signature : <code>int avio_read_dir(AVIODirContext*, AVIODirEntry**)</code><br>
	 * <i>native declaration : libavformat\avio.h:185</i><br>
	 * @deprecated use the safer method {@link #avio_read_dir(org.ffmpeg.avformat57.AVIODirContext, org.ffmpeg.avformat57.AVIODirEntry.ByReference[])} instead
	 */
	@Deprecated 
	int avio_read_dir(AVIODirContext s, PointerByReference next);
	/**
	 * Get next directory entry.<br>
	 * Returned entry must be freed with avio_free_directory_entry(). In particular<br>
	 * it may outlive AVIODirContext.<br>
	 * @param s         directory read context.<br>
	 * @param[out] next next entry or NULL when no more entries.<br>
	 * @return >=0 on success or negative on error. End of list is not considered an<br>
	 *             error.<br>
	 * Original signature : <code>int avio_read_dir(AVIODirContext*, AVIODirEntry**)</code><br>
	 * <i>native declaration : libavformat\avio.h:185</i>
	 */
	int avio_read_dir(AVIODirContext s, org.ffmpeg.avformat57.AVIODirEntry.ByReference next[]);
	/**
	 * Close directory.<br>
	 * @note Entries created using avio_read_dir() are not deleted and must be<br>
	 * freeded with avio_free_directory_entry().<br>
	 * @param s         directory read context.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avio_close_dir(AVIODirContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:194</i><br>
	 * @deprecated use the safer method {@link #avio_close_dir(org.ffmpeg.avformat57.AVIODirContext.ByReference[])} instead
	 */
	@Deprecated 
	int avio_close_dir(PointerByReference s);
	/**
	 * Close directory.<br>
	 * @note Entries created using avio_read_dir() are not deleted and must be<br>
	 * freeded with avio_free_directory_entry().<br>
	 * @param s         directory read context.<br>
	 * @return >=0 on success or negative on error.<br>
	 * Original signature : <code>int avio_close_dir(AVIODirContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:194</i>
	 */
	int avio_close_dir(AVIODirContext.ByReference s[]);
	/**
	 * Free entry allocated by avio_read_dir().<br>
	 * @param entry entry to be freed.<br>
	 * Original signature : <code>void avio_free_directory_entry(AVIODirEntry**)</code><br>
	 * <i>native declaration : libavformat\avio.h:200</i><br>
	 * @deprecated use the safer method {@link #avio_free_directory_entry(org.ffmpeg.avformat57.AVIODirEntry.ByReference[])} instead
	 */
	@Deprecated 
	void avio_free_directory_entry(PointerByReference entry);
	/**
	 * Free entry allocated by avio_read_dir().<br>
	 * @param entry entry to be freed.<br>
	 * Original signature : <code>void avio_free_directory_entry(AVIODirEntry**)</code><br>
	 * <i>native declaration : libavformat\avio.h:200</i>
	 */
	void avio_free_directory_entry(org.ffmpeg.avformat57.AVIODirEntry.ByReference entry[]);
	/**
	 * Allocate and initialize an AVIOContext for buffered I/O. It must be later<br>
	 * freed with av_free().<br>
	 * @param buffer Memory block for input/output operations via AVIOContext.<br>
	 *        The buffer must be allocated with av_malloc() and friends.<br>
	 *        It may be freed and replaced with a new buffer by libavformat.<br>
	 *        AVIOContext.buffer holds the buffer currently in use,<br>
	 *        which must be later freed with av_free().<br>
	 * @param buffer_size The buffer size is very important for performance.<br>
	 *        For protocols with fixed blocksize it should be set to this blocksize.<br>
	 *        For others a typical size is a cache page, e.g. 4kb.<br>
	 * @param write_flag Set to 1 if the buffer should be writable, 0 otherwise.<br>
	 * @param opaque An opaque pointer to user-specific data.<br>
	 * @param read_packet  A function for refilling the buffer, may be NULL.<br>
	 * @param write_packet A function for writing the buffer contents, may be NULL.<br>
	 *        The function may not change the input buffers content.<br>
	 * @param seek A function for seeking to specified byte position, may be NULL.<br>
	 * @return Allocated AVIOContext or NULL on failure.<br>
	 * Original signature : <code>AVIOContext* avio_alloc_context(unsigned char*, int, int, void*, avio_alloc_context_read_packet_callback*, avio_alloc_context_write_packet_callback*, avio_alloc_context_seek_callback*)</code><br>
	 * <i>native declaration : libavformat\avio.h:221</i><br>
	 *  use the safer methods {@link #avio_alloc_context(ByteBuffer, int, int, Pointer, org.ffmpeg.avformat57.Avformat57Library.avio_alloc_context_read_packet_callback, org.ffmpeg.avformat57.Avformat57Library.avio_alloc_context_write_packet_callback, org.ffmpeg.avformat57.Avformat57Library.avio_alloc_context_seek_callback)} and {@link #avio_alloc_context(Pointer, int, int, Pointer, org.ffmpeg.avformat57.Avformat57Library.avio_alloc_context_read_packet_callback, org.ffmpeg.avformat57.Avformat57Library.avio_alloc_context_write_packet_callback, org.ffmpeg.avformat57.Avformat57Library.avio_alloc_context_seek_callback)} instead
	 */
	AVIOContext.ByReference avio_alloc_context(Pointer buffer, int buffer_size, int write_flag, Pointer opaque, avio_alloc_context_read_packet_callback read_packet, avio_alloc_context_write_packet_callback write_packet, avio_alloc_context_seek_callback seek);
	/**
	 * Allocate and initialize an AVIOContext for buffered I/O. It must be later<br>
	 * freed with av_free().<br>
	 * @param buffer Memory block for input/output operations via AVIOContext.<br>
	 *        The buffer must be allocated with av_malloc() and friends.<br>
	 *        It may be freed and replaced with a new buffer by libavformat.<br>
	 *        AVIOContext.buffer holds the buffer currently in use,<br>
	 *        which must be later freed with av_free().<br>
	 * @param buffer_size The buffer size is very important for performance.<br>
	 *        For protocols with fixed blocksize it should be set to this blocksize.<br>
	 *        For others a typical size is a cache page, e.g. 4kb.<br>
	 * @param write_flag Set to 1 if the buffer should be writable, 0 otherwise.<br>
	 * @param opaque An opaque pointer to user-specific data.<br>
	 * @param read_packet  A function for refilling the buffer, may be NULL.<br>
	 * @param write_packet A function for writing the buffer contents, may be NULL.<br>
	 *        The function may not change the input buffers content.<br>
	 * @param seek A function for seeking to specified byte position, may be NULL.<br>
	 * @return Allocated AVIOContext or NULL on failure.<br>
	 * Original signature : <code>AVIOContext* avio_alloc_context(unsigned char*, int, int, void*, avio_alloc_context_read_packet_callback*, avio_alloc_context_write_packet_callback*, avio_alloc_context_seek_callback*)</code><br>
	 * <i>native declaration : libavformat\avio.h:221</i>
	 */
	AVIOContext.ByReference avio_alloc_context(ByteBuffer buffer, int buffer_size, int write_flag, Pointer opaque, avio_alloc_context_read_packet_callback read_packet, avio_alloc_context_write_packet_callback write_packet, avio_alloc_context_seek_callback seek);
	/**
	 * Original signature : <code>void avio_w8(AVIOContext*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:223</i>
	 */
	void avio_w8(AVIOContext s, int b);
	/**
	 * Original signature : <code>void avio_write(AVIOContext*, const unsigned char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:225</i><br>
	 * @deprecated use the safer methods {@link #avio_write(org.ffmpeg.avformat57.AVIOContext, byte[], int)} and {@link #avio_write(org.ffmpeg.avformat57.AVIOContext, Pointer, int)} instead
	 */
	@Deprecated 
	void avio_write(AVIOContext s, Pointer buf, int size);
	/**
	 * Original signature : <code>void avio_write(AVIOContext*, const unsigned char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:225</i>
	 */
	void avio_write(AVIOContext s, byte buf[], int size);
	/**
	 * Original signature : <code>void avio_wl64(AVIOContext*, uint64_t)</code><br>
	 * <i>native declaration : libavformat\avio.h:227</i>
	 */
	void avio_wl64(AVIOContext s, long val);
	/**
	 * Original signature : <code>void avio_wb64(AVIOContext*, uint64_t)</code><br>
	 * <i>native declaration : libavformat\avio.h:229</i>
	 */
	void avio_wb64(AVIOContext s, long val);
	/**
	 * Original signature : <code>void avio_wl32(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avio.h:231</i>
	 */
	void avio_wl32(AVIOContext s, int val);
	/**
	 * Original signature : <code>void avio_wb32(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avio.h:233</i>
	 */
	void avio_wb32(AVIOContext s, int val);
	/**
	 * Original signature : <code>void avio_wl24(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avio.h:235</i>
	 */
	void avio_wl24(AVIOContext s, int val);
	/**
	 * Original signature : <code>void avio_wb24(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avio.h:237</i>
	 */
	void avio_wb24(AVIOContext s, int val);
	/**
	 * Original signature : <code>void avio_wl16(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avio.h:239</i>
	 */
	void avio_wl16(AVIOContext s, int val);
	/**
	 * Original signature : <code>void avio_wb16(AVIOContext*, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avio.h:241</i>
	 */
	void avio_wb16(AVIOContext s, int val);
	/**
	 * Write a NULL-terminated string.<br>
	 * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:247</i><br>
	 * @deprecated use the safer methods {@link #avio_put_str(org.ffmpeg.avformat57.AVIOContext, String)} and {@link #avio_put_str(org.ffmpeg.avformat57.AVIOContext, Pointer)} instead
	 */
	@Deprecated 
	int avio_put_str(AVIOContext s, Pointer str);
	/**
	 * Write a NULL-terminated string.<br>
	 * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:247</i>
	 */
	int avio_put_str(AVIOContext s, String str);
	/**
	 * Convert an UTF-8 string to UTF-16LE and write it.<br>
	 * @param s the AVIOContext<br>
	 * @param str NULL-terminated UTF-8 string<br>
	 * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str16le(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:255</i><br>
	 * @deprecated use the safer methods {@link #avio_put_str16le(org.ffmpeg.avformat57.AVIOContext, String)} and {@link #avio_put_str16le(org.ffmpeg.avformat57.AVIOContext, Pointer)} instead
	 */
	@Deprecated 
	int avio_put_str16le(AVIOContext s, Pointer str);
	/**
	 * Convert an UTF-8 string to UTF-16LE and write it.<br>
	 * @param s the AVIOContext<br>
	 * @param str NULL-terminated UTF-8 string<br>
	 * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str16le(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:255</i>
	 */
	int avio_put_str16le(AVIOContext s, String str);
	/**
	 * Convert an UTF-8 string to UTF-16BE and write it.<br>
	 * @param s the AVIOContext<br>
	 * @param str NULL-terminated UTF-8 string<br>
	 * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str16be(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:263</i><br>
	 * @deprecated use the safer methods {@link #avio_put_str16be(org.ffmpeg.avformat57.AVIOContext, String)} and {@link #avio_put_str16be(org.ffmpeg.avformat57.AVIOContext, Pointer)} instead
	 */
	@Deprecated 
	int avio_put_str16be(AVIOContext s, Pointer str);
	/**
	 * Convert an UTF-8 string to UTF-16BE and write it.<br>
	 * @param s the AVIOContext<br>
	 * @param str NULL-terminated UTF-8 string<br>
	 * @return number of bytes written.<br>
	 * Original signature : <code>int avio_put_str16be(AVIOContext*, const char*)</code><br>
	 * <i>native declaration : libavformat\avio.h:263</i>
	 */
	int avio_put_str16be(AVIOContext s, String str);
	/**
	 * Mark the written bytestream as a specific type.<br>
	 * Zero-length ranges are omitted from the output.<br>
	 * @param time the stream time the current bytestream pos corresponds to<br>
	 *             (in AV_TIME_BASE units), or AV_NOPTS_VALUE if unknown or not<br>
	 *             applicable<br>
	 * @param type the kind of data written starting at the current pos<br>
	 * Original signature : <code>void avio_write_marker(AVIOContext*, int64_t, AVIODataMarkerType)</code><br>
	 * <i>native declaration : libavformat\avio.h:273</i>
	 */
	void avio_write_marker(AVIOContext s, long time, int type);
	/**
	 * fseek() equivalent for AVIOContext.<br>
	 * @return new position or AVERROR.<br>
	 * Original signature : <code>int64_t avio_seek(AVIOContext*, int64_t, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:279</i>
	 */
	long avio_seek(AVIOContext s, long offset, int whence);
	/**
	 * Skip given number of bytes forward<br>
	 * @return new position or AVERROR.<br>
	 * Original signature : <code>int64_t avio_skip(AVIOContext*, int64_t)</code><br>
	 * <i>native declaration : libavformat\avio.h:285</i>
	 */
	long avio_skip(AVIOContext s, long offset);
	/**
	 * ftell() equivalent for AVIOContext.<br>
	 * @return position or AVERROR.<br>
	 * Original signature : <code>int64_t avio_tell(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:293</i>
	 */
	long avio_tell(AVIOContext s);
	/**
	 * Get the filesize.<br>
	 * @return filesize or AVERROR<br>
	 * Original signature : <code>int64_t avio_size(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:299</i>
	 */
	long avio_size(AVIOContext s);
	/**
	 * feof() equivalent for AVIOContext.<br>
	 * @return non zero if and only if end of file<br>
	 * Original signature : <code>int avio_feof(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:305</i>
	 */
	int avio_feof(AVIOContext s);
	/**
	 * @deprecated use avio_feof()<br>
	 * Original signature : <code>int url_feof(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:310</i>
	 */
	int url_feof(AVIOContext s);
	/**
	 * @warning Writes up to 4 KiB per call<br>
	 * Original signature : <code>int avio_printf(AVIOContext*, const char*, null)</code><br>
	 * <i>native declaration : libavformat\avio.h:315</i><br>
	 * @deprecated use the safer methods {@link #avio_printf(org.ffmpeg.avformat57.AVIOContext, String, Object)} and {@link #avio_printf(org.ffmpeg.avformat57.AVIOContext, Pointer, Object)} instead
	 */
	@Deprecated 
	int avio_printf(AVIOContext s, Pointer fmt, Object... varArgs1);
	/**
	 * @warning Writes up to 4 KiB per call<br>
	 * Original signature : <code>int avio_printf(AVIOContext*, const char*, null)</code><br>
	 * <i>native declaration : libavformat\avio.h:315</i>
	 */
	int avio_printf(AVIOContext s, String fmt, Object... varArgs1);
	/**
	 * Force flushing of buffered data.<br>
	 * For write streams, force the buffered data to be immediately written to the output,<br>
	 * without to wait to fill the internal buffer.<br>
	 * For read streams, discard all currently buffered data, and advance the<br>
	 * reported file position to that of the underlying stream. This does not<br>
	 * read new data, and does not perform any seeks.<br>
	 * Original signature : <code>void avio_flush(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:325</i>
	 */
	void avio_flush(AVIOContext s);
	/**
	 * Read size bytes from AVIOContext into buf.<br>
	 * @return number of bytes read or AVERROR<br>
	 * Original signature : <code>int avio_read(AVIOContext*, unsigned char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:331</i><br>
	 * @deprecated use the safer methods {@link #avio_read(org.ffmpeg.avformat57.AVIOContext, ByteBuffer, int)} and {@link #avio_read(org.ffmpeg.avformat57.AVIOContext, Pointer, int)} instead
	 */
	@Deprecated 
	int avio_read(AVIOContext s, Pointer buf, int size);
	/**
	 * Read size bytes from AVIOContext into buf.<br>
	 * @return number of bytes read or AVERROR<br>
	 * Original signature : <code>int avio_read(AVIOContext*, unsigned char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:331</i>
	 */
	int avio_read(AVIOContext s, ByteBuffer buf, int size);
	/**
	 * @name Functions for reading from AVIOContext<br>
	 * @{<br>
	 * @note return 0 if EOF, so you cannot use it if EOF handling is<br>
	 *       necessary<br>
	 * Original signature : <code>int avio_r8(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:339</i>
	 */
	int avio_r8(AVIOContext s);
	/**
	 * Original signature : <code>int avio_rl16(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:341</i>
	 */
	int avio_rl16(AVIOContext s);
	/**
	 * Original signature : <code>int avio_rl24(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:343</i>
	 */
	int avio_rl24(AVIOContext s);
	/**
	 * Original signature : <code>int avio_rl32(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:345</i>
	 */
	int avio_rl32(AVIOContext s);
	/**
	 * Original signature : <code>uint64_t avio_rl64(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:347</i>
	 */
	long avio_rl64(AVIOContext s);
	/**
	 * Original signature : <code>int avio_rb16(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:349</i>
	 */
	int avio_rb16(AVIOContext s);
	/**
	 * Original signature : <code>int avio_rb24(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:351</i>
	 */
	int avio_rb24(AVIOContext s);
	/**
	 * Original signature : <code>int avio_rb32(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:353</i>
	 */
	int avio_rb32(AVIOContext s);
	/**
	 * Original signature : <code>uint64_t avio_rb64(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:355</i>
	 */
	long avio_rb64(AVIOContext s);
	/**
	 * Read a string from pb into buf. The reading will terminate when either<br>
	 * a NULL character was encountered, maxlen bytes have been read, or nothing<br>
	 * more can be read from pb. The result is guaranteed to be NULL-terminated, it<br>
	 * will be truncated if buf is too small.<br>
	 * Note that the string is not interpreted or validated in any way, it<br>
	 * might get truncated in the middle of a sequence for multi-byte encodings.<br>
	 * @return number of bytes read (is always <= maxlen).<br>
	 * If reading ends on EOF or error, the return value will be one more than<br>
	 * bytes actually read.<br>
	 * Original signature : <code>int avio_get_str(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:368</i><br>
	 * @deprecated use the safer methods {@link #avio_get_str(org.ffmpeg.avformat57.AVIOContext, int, ByteBuffer, int)} and {@link #avio_get_str(org.ffmpeg.avformat57.AVIOContext, int, Pointer, int)} instead
	 */
	@Deprecated 
	int avio_get_str(AVIOContext pb, int maxlen, Pointer buf, int buflen);
	/**
	 * Read a string from pb into buf. The reading will terminate when either<br>
	 * a NULL character was encountered, maxlen bytes have been read, or nothing<br>
	 * more can be read from pb. The result is guaranteed to be NULL-terminated, it<br>
	 * will be truncated if buf is too small.<br>
	 * Note that the string is not interpreted or validated in any way, it<br>
	 * might get truncated in the middle of a sequence for multi-byte encodings.<br>
	 * @return number of bytes read (is always <= maxlen).<br>
	 * If reading ends on EOF or error, the return value will be one more than<br>
	 * bytes actually read.<br>
	 * Original signature : <code>int avio_get_str(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:368</i>
	 */
	int avio_get_str(AVIOContext pb, int maxlen, ByteBuffer buf, int buflen);
	/**
	 * Read a UTF-16 string from pb and convert it to UTF-8.<br>
	 * The reading will terminate when either a null or invalid character was<br>
	 * encountered or maxlen bytes have been read.<br>
	 * @return number of bytes read (is always <= maxlen)<br>
	 * Original signature : <code>int avio_get_str16le(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:376</i><br>
	 * @deprecated use the safer methods {@link #avio_get_str16le(org.ffmpeg.avformat57.AVIOContext, int, ByteBuffer, int)} and {@link #avio_get_str16le(org.ffmpeg.avformat57.AVIOContext, int, Pointer, int)} instead
	 */
	@Deprecated 
	int avio_get_str16le(AVIOContext pb, int maxlen, Pointer buf, int buflen);
	/**
	 * Read a UTF-16 string from pb and convert it to UTF-8.<br>
	 * The reading will terminate when either a null or invalid character was<br>
	 * encountered or maxlen bytes have been read.<br>
	 * @return number of bytes read (is always <= maxlen)<br>
	 * Original signature : <code>int avio_get_str16le(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:376</i>
	 */
	int avio_get_str16le(AVIOContext pb, int maxlen, ByteBuffer buf, int buflen);
	/**
	 * Original signature : <code>int avio_get_str16be(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:378</i><br>
	 * @deprecated use the safer methods {@link #avio_get_str16be(org.ffmpeg.avformat57.AVIOContext, int, ByteBuffer, int)} and {@link #avio_get_str16be(org.ffmpeg.avformat57.AVIOContext, int, Pointer, int)} instead
	 */
	@Deprecated 
	int avio_get_str16be(AVIOContext pb, int maxlen, Pointer buf, int buflen);
	/**
	 * Original signature : <code>int avio_get_str16be(AVIOContext*, int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:378</i>
	 */
	int avio_get_str16be(AVIOContext pb, int maxlen, ByteBuffer buf, int buflen);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open(AVIOContext**, const char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:393</i><br>
	 * @deprecated use the safer methods {@link #avio_open(org.ffmpeg.avformat57.AVIOContext.ByReference[], String, int)} and {@link #avio_open(org.ffmpeg.avformat57.AVIOContext.ByReference[], Pointer, int)} instead
	 */
	@Deprecated 
	int avio_open(PointerByReference s, Pointer url, int flags);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open(AVIOContext**, const char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:393</i>
	 */
	int avio_open(AVIOContext.ByReference s[], String url, int flags);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open(AVIOContext**, const char*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:393</i>
	 */
	int avio_open(AVIOContext.ByReference s[], Pointer url, int flags);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @param int_cb an interrupt callback to be used at the protocols level<br>
	 * @param options  A dictionary filled with protocol-private options. On return<br>
	 * this parameter will be destroyed and replaced with a dict containing options<br>
	 * that were not found. May be NULL.<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open2(AVIOContext**, const char*, int, const AVIOInterruptCB*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avio.h:412</i><br>
	 * @deprecated use the safer methods {@link #avio_open2(org.ffmpeg.avformat57.AVIOContext.ByReference[], String, int, org.ffmpeg.avformat57.AVIOInterruptCB, org.ffmpeg.avutil55.AVDictionary.ByReference[])} and {@link #avio_open2(org.ffmpeg.avformat57.AVIOContext.ByReference[], Pointer, int, org.ffmpeg.avformat57.AVIOInterruptCB, org.ffmpeg.avutil55.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avio_open2(PointerByReference s, Pointer url, int flags, AVIOInterruptCB int_cb, PointerByReference options);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @param int_cb an interrupt callback to be used at the protocols level<br>
	 * @param options  A dictionary filled with protocol-private options. On return<br>
	 * this parameter will be destroyed and replaced with a dict containing options<br>
	 * that were not found. May be NULL.<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open2(AVIOContext**, const char*, int, const AVIOInterruptCB*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avio.h:412</i>
	 */
	int avio_open2(AVIOContext.ByReference s[], String url, int flags, AVIOInterruptCB int_cb, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Create and initialize a AVIOContext for accessing the<br>
	 * resource indicated by url.<br>
	 * @note When the resource indicated by url has been opened in<br>
	 * read+write mode, the AVIOContext can be used only for writing.<br>
	 * @param s Used to return the pointer to the created AVIOContext.<br>
	 * In case of failure the pointed to value is set to NULL.<br>
	 * @param url resource to access<br>
	 * @param flags flags which control how the resource indicated by url<br>
	 * is to be opened<br>
	 * @param int_cb an interrupt callback to be used at the protocols level<br>
	 * @param options  A dictionary filled with protocol-private options. On return<br>
	 * this parameter will be destroyed and replaced with a dict containing options<br>
	 * that were not found. May be NULL.<br>
	 * @return >= 0 in case of success, a negative value corresponding to an<br>
	 * AVERROR code in case of failure<br>
	 * Original signature : <code>int avio_open2(AVIOContext**, const char*, int, const AVIOInterruptCB*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avio.h:412</i>
	 */
	int avio_open2(AVIOContext.ByReference s[], Pointer url, int flags, AVIOInterruptCB int_cb, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Close the resource accessed by the AVIOContext s and free it.<br>
	 * This function can only be used if s was opened by avio_open().<br>
	 * The internal buffer is automatically flushed before closing the<br>
	 * resource.<br>
	 * @return 0 on success, an AVERROR < 0 on error.<br>
	 * @see avio_closep<br>
	 * Original signature : <code>int avio_close(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:422</i>
	 */
	int avio_close(AVIOContext s);
	/**
	 * Close the resource accessed by the AVIOContext *s, free it<br>
	 * and set the pointer pointing to it to NULL.<br>
	 * This function can only be used if s was opened by avio_open().<br>
	 * The internal buffer is automatically flushed before closing the<br>
	 * resource.<br>
	 * @return 0 on success, an AVERROR < 0 on error.<br>
	 * @see avio_close<br>
	 * Original signature : <code>int avio_closep(AVIOContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:433</i><br>
	 * @deprecated use the safer method {@link #avio_closep(org.ffmpeg.avformat57.AVIOContext.ByReference[])} instead
	 */
	@Deprecated 
	int avio_closep(PointerByReference s);
	/**
	 * Close the resource accessed by the AVIOContext *s, free it<br>
	 * and set the pointer pointing to it to NULL.<br>
	 * This function can only be used if s was opened by avio_open().<br>
	 * The internal buffer is automatically flushed before closing the<br>
	 * resource.<br>
	 * @return 0 on success, an AVERROR < 0 on error.<br>
	 * @see avio_close<br>
	 * Original signature : <code>int avio_closep(AVIOContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:433</i>
	 */
	int avio_closep(AVIOContext.ByReference s[]);
	/**
	 * Open a write only memory stream.<br>
	 * @param s new IO context<br>
	 * @return zero if no error.<br>
	 * Original signature : <code>int avio_open_dyn_buf(AVIOContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:440</i><br>
	 * @deprecated use the safer method {@link #avio_open_dyn_buf(org.ffmpeg.avformat57.AVIOContext.ByReference[])} instead
	 */
	@Deprecated 
	int avio_open_dyn_buf(PointerByReference s);
	/**
	 * Open a write only memory stream.<br>
	 * @param s new IO context<br>
	 * @return zero if no error.<br>
	 * Original signature : <code>int avio_open_dyn_buf(AVIOContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:440</i>
	 */
	int avio_open_dyn_buf(AVIOContext.ByReference s[]);
	/**
	 * Return the written size and a pointer to the buffer.<br>
	 * The AVIOContext stream is left intact.<br>
	 * The buffer must NOT be freed.<br>
	 * No padding is added to the buffer.<br>
	 * @param s IO context<br>
	 * @param pbuffer pointer to a byte buffer<br>
	 * @return the length of the byte buffer<br>
	 * Original signature : <code>int avio_get_dyn_buf(AVIOContext*, uint8_t**)</code><br>
	 * <i>native declaration : libavformat\avio.h:451</i>
	 */
	int avio_get_dyn_buf(AVIOContext s, PointerByReference pbuffer);
	/**
	 * Return the written size and a pointer to the buffer. The buffer<br>
	 * must be freed with av_free().<br>
	 * Padding of AV_INPUT_BUFFER_PADDING_SIZE is added to the buffer.<br>
	 * @param s IO context<br>
	 * @param pbuffer pointer to a byte buffer<br>
	 * @return the length of the byte buffer<br>
	 * Original signature : <code>int avio_close_dyn_buf(AVIOContext*, uint8_t**)</code><br>
	 * <i>native declaration : libavformat\avio.h:461</i>
	 */
	int avio_close_dyn_buf(AVIOContext s, PointerByReference pbuffer);
	/**
	 * Iterate through names of available protocols.<br>
	 * @param opaque A private pointer representing current protocol.<br>
	 *        It must be a pointer to NULL on first iteration and will<br>
	 *        be updated by successive calls to avio_enum_protocols.<br>
	 * @param output If set to 1, iterate over output protocols,<br>
	 *               otherwise over input protocols.<br>
	 * @return A static string containing the name of current protocol or NULL<br>
	 * Original signature : <code>char* avio_enum_protocols(void**, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:472</i>
	 */
	String avio_enum_protocols(PointerByReference opaque, int output);
	/**
	 * Pause and resume playing - only meaningful if using a network streaming<br>
	 * protocol (e.g. MMS).<br>
	 * @param h     IO context from which to call the read_pause function pointer<br>
	 * @param pause 1 for pause, 0 for resume<br>
	 * Original signature : <code>int avio_pause(AVIOContext*, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:480</i>
	 */
	int avio_pause(AVIOContext h, int pause);
	/**
	 * Seek to a given timestamp relative to some component stream.<br>
	 * Only meaningful if using a network streaming protocol (e.g. MMS.).<br>
	 * @param h IO context from which to call the seek function pointers<br>
	 * @param stream_index The stream index that the timestamp is relative to.<br>
	 *        If stream_index is (-1) the timestamp should be in AV_TIME_BASE<br>
	 *        units from the beginning of the presentation.<br>
	 *        If a stream_index >= 0 is used and the protocol does not support<br>
	 *        seeking based on component streams, the call will fail.<br>
	 * @param timestamp timestamp in AVStream.time_base units<br>
	 *        or if there is no stream specified then in AV_TIME_BASE units.<br>
	 * @param flags Optional combination of AVSEEK_FLAG_BACKWARD, AVSEEK_FLAG_BYTE<br>
	 *        and AVSEEK_FLAG_ANY. The protocol may silently ignore<br>
	 *        AVSEEK_FLAG_BACKWARD and AVSEEK_FLAG_ANY, but AVSEEK_FLAG_BYTE will<br>
	 *        fail if used and not supported.<br>
	 * @return >= 0 on success<br>
	 * @see AVInputFormat::read_seek<br>
	 * Original signature : <code>int64_t avio_seek_time(AVIOContext*, int, int64_t, int)</code><br>
	 * <i>native declaration : libavformat\avio.h:500</i>
	 */
	long avio_seek_time(AVIOContext h, int stream_index, long timestamp, int flags);
	/**
	 * Read contents of h into print buffer, up to max_size bytes, or up to EOF.<br>
	 * @return 0 for success (max_size bytes read or EOF reached), negative error<br>
	 * code otherwise<br>
	 * Original signature : <code>int avio_read_to_bprint(AVIOContext*, AVBPrint*, size_t)</code><br>
	 * <i>native declaration : libavformat\avio.h:509</i>
	 */
	int avio_read_to_bprint(AVIOContext h, AVBPrint pb, NativeSize max_size);
	/**
	 * Accept and allocate a client context on a server context.<br>
	 * @param  s the server context<br>
	 * @param  c the client context, must be unallocated<br>
	 * @return   >= 0 on success or a negative value corresponding<br>
	 *           to an AVERROR on failure<br>
	 * Original signature : <code>int avio_accept(AVIOContext*, AVIOContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:518</i><br>
	 * @deprecated use the safer method {@link #avio_accept(org.ffmpeg.avformat57.AVIOContext, org.ffmpeg.avformat57.AVIOContext.ByReference[])} instead
	 */
	@Deprecated 
	int avio_accept(AVIOContext s, PointerByReference c);
	/**
	 * Accept and allocate a client context on a server context.<br>
	 * @param  s the server context<br>
	 * @param  c the client context, must be unallocated<br>
	 * @return   >= 0 on success or a negative value corresponding<br>
	 *           to an AVERROR on failure<br>
	 * Original signature : <code>int avio_accept(AVIOContext*, AVIOContext**)</code><br>
	 * <i>native declaration : libavformat\avio.h:518</i>
	 */
	int avio_accept(AVIOContext s, AVIOContext.ByReference c[]);
	/**
	 * Perform one step of the protocol handshake to accept a new client.<br>
	 * This function must be called on a client returned by avio_accept() before<br>
	 * using it as a read/write context.<br>
	 * It is separate from avio_accept() because it may block.<br>
	 * A step of the handshake is defined by places where the application may<br>
	 * decide to change the proceedings.<br>
	 * For example, on a protocol with a request header and a reply header, each<br>
	 * one can constitute a step because the application may use the parameters<br>
	 * from the request to change parameters in the reply; or each individual<br>
	 * chunk of the request can constitute a step.<br>
	 * If the handshake is already finished, avio_handshake() does nothing and<br>
	 * returns 0 immediately.<br>
	 * @param  c the client context to perform the handshake on<br>
	 * @return   0   on a complete and successful handshake<br>
	 *           > 0 if the handshake progressed, but is not complete<br>
	 *           < 0 for an AVERROR code<br>
	 * Original signature : <code>int avio_handshake(AVIOContext*)</code><br>
	 * <i>native declaration : libavformat\avio.h:538</i>
	 */
	int avio_handshake(AVIOContext c);
	/**
	 * Allocate and read the payload of a packet and initialize its<br>
	 * fields with default values.<br>
	 * @param s    associated IO context<br>
	 * @param pkt packet<br>
	 * @param size desired payload size<br>
	 * @return >0 (read size) if OK, AVERROR_xxx otherwise<br>
	 * Original signature : <code>int av_get_packet(AVIOContext*, AVPacket*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:15</i>
	 */
	int av_get_packet(AVIOContext s, AVPacket pkt, int size);
	/**
	 * Read data and append it to the current content of the AVPacket.<br>
	 * If pkt->size is 0 this is identical to av_get_packet.<br>
	 * Note that this uses av_grow_packet and thus involves a realloc<br>
	 * which is inefficient. Thus this function should only be used<br>
	 * when there is no reasonable way to know (an upper bound of)<br>
	 * the final size.<br>
	 * @param s    associated IO context<br>
	 * @param pkt packet<br>
	 * @param size amount of data to read<br>
	 * @return >0 (read size) if OK, AVERROR_xxx otherwise, previous data<br>
	 *         will not be lost even if an error occurs.<br>
	 * Original signature : <code>int av_append_packet(AVIOContext*, AVPacket*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:30</i>
	 */
	int av_append_packet(AVIOContext s, AVPacket pkt, int size);
	/**
	 * Original signature : <code>AVRational av_stream_get_r_frame_rate(const AVStream*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:273</i>
	 */
	ByValue av_stream_get_r_frame_rate(AVStream s);
	/**
	 * Original signature : <code>void av_stream_set_r_frame_rate(AVStream*, AVRational)</code><br>
	 * <i>native declaration : libavformat\avformat.h:275</i>
	 */
	void av_stream_set_r_frame_rate(AVStream s, ByValue r);
	/**
	 * Original signature : <code>AVCodecParserContext* av_stream_get_parser(const AVStream*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:277</i>
	 */
	AVCodecParserContext av_stream_get_parser(AVStream s);
	/**
	 * Original signature : <code>char* av_stream_get_recommended_encoder_configuration(const AVStream*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:279</i>
	 */
	Pointer av_stream_get_recommended_encoder_configuration(AVStream s);
	/**
	 * Original signature : <code>void av_stream_set_recommended_encoder_configuration(AVStream*, char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:281</i><br>
	 * @deprecated use the safer methods {@link #av_stream_set_recommended_encoder_configuration(org.ffmpeg.avformat57.AVStream, ByteBuffer)} and {@link #av_stream_set_recommended_encoder_configuration(org.ffmpeg.avformat57.AVStream, Pointer)} instead
	 */
	@Deprecated 
	void av_stream_set_recommended_encoder_configuration(AVStream s, Pointer configuration);
	/**
	 * Original signature : <code>void av_stream_set_recommended_encoder_configuration(AVStream*, char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:281</i>
	 */
	void av_stream_set_recommended_encoder_configuration(AVStream s, ByteBuffer configuration);
	/**
	 * Returns the pts of the last muxed packet + its duration<br>
	 * the retuned value is undefined when used with a demuxer.<br>
	 * Original signature : <code>int64_t av_stream_get_end_pts(const AVStream*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:287</i>
	 */
	long av_stream_get_end_pts(AVStream st);
	/**
	 * Accessors for some AVFormatContext fields. These used to be provided for ABI<br>
	 * compatibility, and do not need to be used anymore.<br>
	 * Original signature : <code>int av_format_get_probe_score(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:448</i>
	 */
	int av_format_get_probe_score(AVFormatContext s);
	/**
	 * Original signature : <code>AVCodec* av_format_get_video_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:450</i>
	 */
	AVCodec av_format_get_video_codec(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_video_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:452</i>
	 */
	void av_format_set_video_codec(AVFormatContext s, AVCodec c);
	/**
	 * Original signature : <code>AVCodec* av_format_get_audio_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:454</i>
	 */
	AVCodec av_format_get_audio_codec(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_audio_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:456</i>
	 */
	void av_format_set_audio_codec(AVFormatContext s, AVCodec c);
	/**
	 * Original signature : <code>AVCodec* av_format_get_subtitle_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:458</i>
	 */
	AVCodec av_format_get_subtitle_codec(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_subtitle_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:460</i>
	 */
	void av_format_set_subtitle_codec(AVFormatContext s, AVCodec c);
	/**
	 * Original signature : <code>AVCodec* av_format_get_data_codec(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:462</i>
	 */
	AVCodec av_format_get_data_codec(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_data_codec(AVFormatContext*, AVCodec*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:464</i>
	 */
	void av_format_set_data_codec(AVFormatContext s, AVCodec c);
	/**
	 * Original signature : <code>int av_format_get_metadata_header_padding(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:466</i>
	 */
	int av_format_get_metadata_header_padding(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_metadata_header_padding(AVFormatContext*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:468</i>
	 */
	void av_format_set_metadata_header_padding(AVFormatContext s, int c);
	/**
	 * Original signature : <code>void* av_format_get_opaque(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:470</i>
	 */
	Pointer av_format_get_opaque(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_opaque(AVFormatContext*, void*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:472</i>
	 */
	void av_format_set_opaque(AVFormatContext s, Pointer opaque);
	/**
	 * Original signature : <code>av_format_control_message av_format_get_control_message_cb(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:474</i>
	 */
	av_format_control_message av_format_get_control_message_cb(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_control_message_cb(AVFormatContext*, av_format_control_message)</code><br>
	 * <i>native declaration : libavformat\avformat.h:476</i>
	 */
	void av_format_set_control_message_cb(AVFormatContext s, av_format_control_message callback);
	/**
	 * Original signature : <code>AVOpenCallback av_format_get_open_cb(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:478</i>
	 */
	AVOpenCallback av_format_get_open_cb(AVFormatContext s);
	/**
	 * Original signature : <code>void av_format_set_open_cb(AVFormatContext*, AVOpenCallback)</code><br>
	 * <i>native declaration : libavformat\avformat.h:480</i>
	 */
	void av_format_set_open_cb(AVFormatContext s, AVOpenCallback callback);
	/**
	 * This function will cause global side data to be injected in the next packet<br>
	 * of each stream as well as after any subsequent seek.<br>
	 * Original signature : <code>void av_format_inject_global_side_data(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:486</i>
	 */
	void av_format_inject_global_side_data(AVFormatContext s);
	/**
	 * Returns the method used to set ctx->duration.<br>
	 * @return AVFMT_DURATION_FROM_PTS, AVFMT_DURATION_FROM_STREAM, or AVFMT_DURATION_FROM_BITRATE.<br>
	 * Original signature : <code>AVDurationEstimationMethod av_fmt_ctx_get_duration_estimation_method(const AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:492</i>
	 */
	int av_fmt_ctx_get_duration_estimation_method(AVFormatContext ctx);
	/**
	 * Return the LIBAVFORMAT_VERSION_INT constant.<br>
	 * Original signature : <code>int avformat_version()</code><br>
	 * <i>native declaration : libavformat\avformat.h:501</i>
	 */
	int avformat_version();
	/**
	 * Return the libavformat build-time configuration.<br>
	 * Original signature : <code>char* avformat_configuration()</code><br>
	 * <i>native declaration : libavformat\avformat.h:506</i>
	 */
	String avformat_configuration();
	/**
	 * Return the libavformat license.<br>
	 * Original signature : <code>char* avformat_license()</code><br>
	 * <i>native declaration : libavformat\avformat.h:511</i>
	 */
	String avformat_license();
	/**
	 * Initialize libavformat and register all the muxers, demuxers and<br>
	 * protocols. If you do not call this function, then you can select<br>
	 * exactly which formats you want to support.<br>
	 * @see av_register_input_format()<br>
	 * @see av_register_output_format()<br>
	 * Original signature : <code>void av_register_all()</code><br>
	 * <i>native declaration : libavformat\avformat.h:520</i>
	 */
	void av_register_all();
	/**
	 * Original signature : <code>void av_register_input_format(AVInputFormat*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:522</i>
	 */
	void av_register_input_format(AVInputFormat format);
	/**
	 * Original signature : <code>void av_register_output_format(AVOutputFormat*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:524</i>
	 */
	void av_register_output_format(AVOutputFormat format);
	/**
	 * Do global initialization of network components. This is optional,<br>
	 * but recommended, since it avoids the overhead of implicitly<br>
	 * doing the setup for each session.<br>
	 * Calling this function will become mandatory if using network<br>
	 * protocols at some major version bump.<br>
	 * Original signature : <code>int avformat_network_init()</code><br>
	 * <i>native declaration : libavformat\avformat.h:533</i>
	 */
	int avformat_network_init();
	/**
	 * Undo the initialization done by avformat_network_init.<br>
	 * Original signature : <code>int avformat_network_deinit()</code><br>
	 * <i>native declaration : libavformat\avformat.h:538</i>
	 */
	int avformat_network_deinit();
	/**
	 * If f is NULL, returns the first registered input format,<br>
	 * if f is non-NULL, returns the next registered input format after f<br>
	 * or NULL if f is the last one.<br>
	 * Original signature : <code>AVInputFormat* av_iformat_next(const AVInputFormat*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:545</i>
	 */
	AVInputFormat av_iformat_next(AVInputFormat f);
	/**
	 * If f is NULL, returns the first registered output format,<br>
	 * if f is non-NULL, returns the next registered output format after f<br>
	 * or NULL if f is the last one.<br>
	 * Original signature : <code>AVOutputFormat* av_oformat_next(const AVOutputFormat*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:552</i>
	 */
	AVOutputFormat av_oformat_next(AVOutputFormat f);
	/**
	 * Allocate an AVFormatContext.<br>
	 * avformat_free_context() can be used to free the context and everything<br>
	 * allocated by the framework within it.<br>
	 * Original signature : <code>AVFormatContext* avformat_alloc_context()</code><br>
	 * <i>native declaration : libavformat\avformat.h:559</i>
	 */
	AVFormatContext.ByReference avformat_alloc_context();
	/**
	 * Free an AVFormatContext and all its streams.<br>
	 * @param s context to free<br>
	 * Original signature : <code>void avformat_free_context(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:565</i>
	 */
	void avformat_free_context(AVFormatContext s);
	/**
	 * Get the AVClass for AVFormatContext. It can be used in combination with<br>
	 * AV_OPT_SEARCH_FAKE_OBJ for examining options.<br>
	 * @see av_opt_find().<br>
	 * Original signature : <code>AVClass* avformat_get_class()</code><br>
	 * <i>native declaration : libavformat\avformat.h:572</i>
	 */
	Pointer avformat_get_class();
	/**
	 * Add a new stream to a media file.<br>
	 * When demuxing, it is called by the demuxer in read_header(). If the<br>
	 * flag AVFMTCTX_NOHEADER is set in s.ctx_flags, then it may also<br>
	 * be called in read_packet().<br>
	 * When muxing, should be called by the user before avformat_write_header().<br>
	 * User is required to call avcodec_close() and avformat_free_context() to<br>
	 * clean up the allocation by avformat_new_stream().<br>
	 * @param s media file handle<br>
	 * @param c If non-NULL, the AVCodecContext corresponding to the new stream<br>
	 * will be initialized to use this codec. This is needed for e.g. codec-specific<br>
	 * defaults to be set, so codec should be provided if it is known.<br>
	 * @return newly created stream or NULL on error.<br>
	 * Original signature : <code>AVStream* avformat_new_stream(AVFormatContext*, const AVCodec*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:588</i>
	 */
	AVStream avformat_new_stream(AVFormatContext s, AVCodec c);
	/**
	 * Wrap an existing array as stream side data.<br>
	 * @param st stream<br>
	 * @param type side information type<br>
	 * @param data the side data array. It must be allocated with the av_malloc()<br>
	 *             family of functions. The ownership of the data is transferred to<br>
	 *             st.<br>
	 * @param size side information size<br>
	 * @return zero on success, a negative AVERROR code on failure. On failure,<br>
	 *         the stream is unchanged and the data remains owned by the caller.<br>
	 * Original signature : <code>int av_stream_add_side_data(AVStream*, AVPacketSideDataType, uint8_t*, size_t)</code><br>
	 * <i>native declaration : libavformat\avformat.h:601</i><br>
	 * @deprecated use the safer methods {@link #av_stream_add_side_data(org.ffmpeg.avformat57.AVStream, int, ByteBuffer, NativeSize)} and {@link #av_stream_add_side_data(org.ffmpeg.avformat57.AVStream, int, Pointer, NativeSize)} instead
	 */
	@Deprecated 
	int av_stream_add_side_data(AVStream st, int type, Pointer data, NativeSize size);
	/**
	 * Wrap an existing array as stream side data.<br>
	 * @param st stream<br>
	 * @param type side information type<br>
	 * @param data the side data array. It must be allocated with the av_malloc()<br>
	 *             family of functions. The ownership of the data is transferred to<br>
	 *             st.<br>
	 * @param size side information size<br>
	 * @return zero on success, a negative AVERROR code on failure. On failure,<br>
	 *         the stream is unchanged and the data remains owned by the caller.<br>
	 * Original signature : <code>int av_stream_add_side_data(AVStream*, AVPacketSideDataType, uint8_t*, size_t)</code><br>
	 * <i>native declaration : libavformat\avformat.h:601</i>
	 */
	int av_stream_add_side_data(AVStream st, int type, ByteBuffer data, NativeSize size);
	/**
	 * Allocate new information from stream.<br>
	 * @param stream stream<br>
	 * @param type desired side information type<br>
	 * @param size side information size<br>
	 * @return pointer to fresh allocated data or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_stream_new_side_data(AVStream*, AVPacketSideDataType, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:610</i>
	 */
	Pointer av_stream_new_side_data(AVStream stream, int type, int size);
	/**
	 * Get side information from stream.<br>
	 * @param stream stream<br>
	 * @param type desired side information type<br>
	 * @param size pointer for side information size to store (optional)<br>
	 * @return pointer to data if present or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_stream_get_side_data(AVStream*, AVPacketSideDataType, int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:619</i><br>
	 * @deprecated use the safer methods {@link #av_stream_get_side_data(org.ffmpeg.avformat57.AVStream, int, IntBuffer)} and {@link #av_stream_get_side_data(org.ffmpeg.avformat57.AVStream, int, IntByReference)} instead
	 */
	@Deprecated 
	Pointer av_stream_get_side_data(AVStream stream, int type, IntByReference size);
	/**
	 * Get side information from stream.<br>
	 * @param stream stream<br>
	 * @param type desired side information type<br>
	 * @param size pointer for side information size to store (optional)<br>
	 * @return pointer to data if present or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_stream_get_side_data(AVStream*, AVPacketSideDataType, int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:619</i>
	 */
	Pointer av_stream_get_side_data(AVStream stream, int type, IntBuffer size);
	/**
	 * Original signature : <code>AVProgram* av_new_program(AVFormatContext*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:621</i>
	 */
	AVProgram av_new_program(AVFormatContext s, int id);
	/**
	 * Allocate an AVFormatContext for an output format.<br>
	 * avformat_free_context() can be used to free the context and<br>
	 * everything allocated by the framework within it.<br>
	 * @param *ctx is set to the created format context, or to NULL in<br>
	 * case of failure<br>
	 * @param oformat format to use for allocating the context, if NULL<br>
	 * format_name and filename are used instead<br>
	 * @param format_name the name of output format to use for allocating the<br>
	 * context, if NULL filename is used instead<br>
	 * @param filename the name of the filename to use for allocating the<br>
	 * context, may be NULL<br>
	 * @return >= 0 in case of success, a negative AVERROR code in case of<br>
	 * failure<br>
	 * Original signature : <code>int avformat_alloc_output_context2(AVFormatContext**, AVOutputFormat*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:638</i><br>
	 * @deprecated use the safer methods {@link #avformat_alloc_output_context2(org.ffmpeg.avformat57.AVFormatContext.ByReference[], org.ffmpeg.avformat57.AVOutputFormat, String, String)} and {@link #avformat_alloc_output_context2(org.ffmpeg.avformat57.AVFormatContext.ByReference[], org.ffmpeg.avformat57.AVOutputFormat, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int avformat_alloc_output_context2(PointerByReference ctx, AVOutputFormat oformat, Pointer format_name, Pointer filename);
	/**
	 * Allocate an AVFormatContext for an output format.<br>
	 * avformat_free_context() can be used to free the context and<br>
	 * everything allocated by the framework within it.<br>
	 * @param *ctx is set to the created format context, or to NULL in<br>
	 * case of failure<br>
	 * @param oformat format to use for allocating the context, if NULL<br>
	 * format_name and filename are used instead<br>
	 * @param format_name the name of output format to use for allocating the<br>
	 * context, if NULL filename is used instead<br>
	 * @param filename the name of the filename to use for allocating the<br>
	 * context, may be NULL<br>
	 * @return >= 0 in case of success, a negative AVERROR code in case of<br>
	 * failure<br>
	 * Original signature : <code>int avformat_alloc_output_context2(AVFormatContext**, AVOutputFormat*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:638</i>
	 */
	int avformat_alloc_output_context2(AVFormatContext.ByReference ctx[], AVOutputFormat oformat, String format_name, String filename);
	/**
	 * Allocate an AVFormatContext for an output format.<br>
	 * avformat_free_context() can be used to free the context and<br>
	 * everything allocated by the framework within it.<br>
	 * @param *ctx is set to the created format context, or to NULL in<br>
	 * case of failure<br>
	 * @param oformat format to use for allocating the context, if NULL<br>
	 * format_name and filename are used instead<br>
	 * @param format_name the name of output format to use for allocating the<br>
	 * context, if NULL filename is used instead<br>
	 * @param filename the name of the filename to use for allocating the<br>
	 * context, may be NULL<br>
	 * @return >= 0 in case of success, a negative AVERROR code in case of<br>
	 * failure<br>
	 * Original signature : <code>int avformat_alloc_output_context2(AVFormatContext**, AVOutputFormat*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:638</i>
	 */
	int avformat_alloc_output_context2(AVFormatContext.ByReference ctx[], AVOutputFormat oformat, Pointer format_name, Pointer filename);
	/**
	 * Find AVInputFormat based on the short name of the input format.<br>
	 * Original signature : <code>AVInputFormat* av_find_input_format(const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:643</i><br>
	 * @deprecated use the safer methods {@link #av_find_input_format(String)} and {@link #av_find_input_format(Pointer)} instead
	 */
	@Deprecated 
	AVInputFormat av_find_input_format(Pointer short_name);
	/**
	 * Find AVInputFormat based on the short name of the input format.<br>
	 * Original signature : <code>AVInputFormat* av_find_input_format(const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:643</i>
	 */
	AVInputFormat av_find_input_format(String short_name);
	/**
	 * Guess the file format.<br>
	 * @param pd        data to be probed<br>
	 * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format(AVProbeData*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:651</i>
	 */
	AVInputFormat av_probe_input_format(AVProbeData pd, int is_opened);
	/**
	 * Guess the file format.<br>
	 * @param pd        data to be probed<br>
	 * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * @param score_max A probe score larger that this is required to accept a<br>
	 *                  detection, the variable is set to the actual detection<br>
	 *                  score afterwards.<br>
	 *                  If the score is <= AVPROBE_SCORE_MAX / 4 it is recommended<br>
	 *                  to retry with a larger probe buffer.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format2(AVProbeData*, int, int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:664</i><br>
	 * @deprecated use the safer methods {@link #av_probe_input_format2(org.ffmpeg.avformat57.AVProbeData, int, IntBuffer)} and {@link #av_probe_input_format2(org.ffmpeg.avformat57.AVProbeData, int, IntByReference)} instead
	 */
	@Deprecated 
	AVInputFormat av_probe_input_format2(AVProbeData pd, int is_opened, IntByReference score_max);
	/**
	 * Guess the file format.<br>
	 * @param pd        data to be probed<br>
	 * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * @param score_max A probe score larger that this is required to accept a<br>
	 *                  detection, the variable is set to the actual detection<br>
	 *                  score afterwards.<br>
	 *                  If the score is <= AVPROBE_SCORE_MAX / 4 it is recommended<br>
	 *                  to retry with a larger probe buffer.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format2(AVProbeData*, int, int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:664</i>
	 */
	AVInputFormat av_probe_input_format2(AVProbeData pd, int is_opened, IntBuffer score_max);
	/**
	 * Guess the file format.<br>
	 * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * @param score_ret The score of the best detection.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format3(AVProbeData*, int, int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:672</i><br>
	 * @deprecated use the safer methods {@link #av_probe_input_format3(org.ffmpeg.avformat57.AVProbeData, int, IntBuffer)} and {@link #av_probe_input_format3(org.ffmpeg.avformat57.AVProbeData, int, IntByReference)} instead
	 */
	@Deprecated 
	AVInputFormat av_probe_input_format3(AVProbeData pd, int is_opened, IntByReference score_ret);
	/**
	 * Guess the file format.<br>
	 * @param is_opened Whether the file is already opened; determines whether<br>
	 *                  demuxers with or without AVFMT_NOFILE are probed.<br>
	 * @param score_ret The score of the best detection.<br>
	 * Original signature : <code>AVInputFormat* av_probe_input_format3(AVProbeData*, int, int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:672</i>
	 */
	AVInputFormat av_probe_input_format3(AVProbeData pd, int is_opened, IntBuffer score_ret);
	/**
	 * Probe a bytestream to determine the input format. Each time a probe returns<br>
	 * with a score that is too low, the probe buffer size is increased and another<br>
	 * attempt is made. When the maximum probe size is reached, the input format<br>
	 * with the highest score is returned.<br>
	 * @param pb the bytestream to probe<br>
	 * @param fmt the input format is put here<br>
	 * @param url the url of the stream<br>
	 * @param logctx the log context<br>
	 * @param offset the offset within the bytestream to probe from<br>
	 * @param max_probe_size the maximum probe buffer size (zero for default)<br>
	 * @return the score in case of success, a negative value corresponding to an<br>
	 *         the maximal score is AVPROBE_SCORE_MAX<br>
	 * AVERROR code otherwise<br>
	 * Original signature : <code>int av_probe_input_buffer2(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:689</i><br>
	 * @deprecated use the safer methods {@link #av_probe_input_buffer2(org.ffmpeg.avformat57.AVIOContext, org.ffmpeg.avformat57.AVInputFormat.ByReference[], String, Pointer, int, int)} and {@link #av_probe_input_buffer2(org.ffmpeg.avformat57.AVIOContext, org.ffmpeg.avformat57.AVInputFormat.ByReference[], Pointer, Pointer, int, int)} instead
	 */
	@Deprecated 
	int av_probe_input_buffer2(AVIOContext pb, PointerByReference fmt, Pointer url, Pointer logctx, int offset, int max_probe_size);
	/**
	 * Probe a bytestream to determine the input format. Each time a probe returns<br>
	 * with a score that is too low, the probe buffer size is increased and another<br>
	 * attempt is made. When the maximum probe size is reached, the input format<br>
	 * with the highest score is returned.<br>
	 * @param pb the bytestream to probe<br>
	 * @param fmt the input format is put here<br>
	 * @param url the url of the stream<br>
	 * @param logctx the log context<br>
	 * @param offset the offset within the bytestream to probe from<br>
	 * @param max_probe_size the maximum probe buffer size (zero for default)<br>
	 * @return the score in case of success, a negative value corresponding to an<br>
	 *         the maximal score is AVPROBE_SCORE_MAX<br>
	 * AVERROR code otherwise<br>
	 * Original signature : <code>int av_probe_input_buffer2(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:689</i>
	 */
	int av_probe_input_buffer2(AVIOContext pb, AVInputFormat.ByReference fmt[], String url, Pointer logctx, int offset, int max_probe_size);
	/**
	 * Probe a bytestream to determine the input format. Each time a probe returns<br>
	 * with a score that is too low, the probe buffer size is increased and another<br>
	 * attempt is made. When the maximum probe size is reached, the input format<br>
	 * with the highest score is returned.<br>
	 * @param pb the bytestream to probe<br>
	 * @param fmt the input format is put here<br>
	 * @param url the url of the stream<br>
	 * @param logctx the log context<br>
	 * @param offset the offset within the bytestream to probe from<br>
	 * @param max_probe_size the maximum probe buffer size (zero for default)<br>
	 * @return the score in case of success, a negative value corresponding to an<br>
	 *         the maximal score is AVPROBE_SCORE_MAX<br>
	 * AVERROR code otherwise<br>
	 * Original signature : <code>int av_probe_input_buffer2(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:689</i>
	 */
	int av_probe_input_buffer2(AVIOContext pb, AVInputFormat.ByReference fmt[], Pointer url, Pointer logctx, int offset, int max_probe_size);
	/**
	 * Like av_probe_input_buffer2() but returns 0 on success<br>
	 * Original signature : <code>int av_probe_input_buffer(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:694</i><br>
	 * @deprecated use the safer methods {@link #av_probe_input_buffer(org.ffmpeg.avformat57.AVIOContext, org.ffmpeg.avformat57.AVInputFormat.ByReference[], String, Pointer, int, int)} and {@link #av_probe_input_buffer(org.ffmpeg.avformat57.AVIOContext, org.ffmpeg.avformat57.AVInputFormat.ByReference[], Pointer, Pointer, int, int)} instead
	 */
	@Deprecated 
	int av_probe_input_buffer(AVIOContext pb, PointerByReference fmt, Pointer url, Pointer logctx, int offset, int max_probe_size);
	/**
	 * Like av_probe_input_buffer2() but returns 0 on success<br>
	 * Original signature : <code>int av_probe_input_buffer(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:694</i>
	 */
	int av_probe_input_buffer(AVIOContext pb, PointerByReference fmt, String url, Pointer logctx, int offset, int max_probe_size);
	/**
	 * Like av_probe_input_buffer2() but returns 0 on success<br>
	 * Original signature : <code>int av_probe_input_buffer(AVIOContext*, AVInputFormat**, const char*, void*, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:694</i>
	 */
	int av_probe_input_buffer(AVIOContext pb, AVInputFormat.ByReference fmt[], Pointer url, Pointer logctx, int offset, int max_probe_size);
	/**
	 * Open an input stream and read the header. The codecs are not opened.<br>
	 * The stream must be closed with avformat_close_input().<br>
	 * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).<br>
	 *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this<br>
	 *           function and written into ps.<br>
	 *           Note that a user-supplied AVFormatContext will be freed on failure.<br>
	 * @param url URL of the stream to open.<br>
	 * @param fmt If non-NULL, this parameter forces a specific input format.<br>
	 *            Otherwise the format is autodetected.<br>
	 * @param options  A dictionary filled with AVFormatContext and demuxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * @return 0 on success, a negative AVERROR on failure.<br>
	 * @note If you want to use custom IO, preallocate the format context and set its pb field.<br>
	 * Original signature : <code>int avformat_open_input(AVFormatContext**, const char*, AVInputFormat*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:712</i><br>
	 * use the safer methods {@link #avformat_open_input(org.ffmpeg.avformat57.AVFormatContext.ByReference[], String, org.ffmpeg.avformat57.AVInputFormat, org.ffmpeg.avutil55.AVDictionary.ByReference[])} and {@link #avformat_open_input(org.ffmpeg.avformat57.AVFormatContext.ByReference[], Pointer, org.ffmpeg.avformat57.AVInputFormat, org.ffmpeg.avutil55.AVDictionary.ByReference[])} instead
	 */
	int avformat_open_input(AVFormatContext.ByReference[] ps, String url, AVInputFormat fmt, PointerByReference options);
	/**
	 * Open an input stream and read the header. The codecs are not opened.<br>
	 * The stream must be closed with avformat_close_input().<br>
	 * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).<br>
	 *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this<br>
	 *           function and written into ps.<br>
	 *           Note that a user-supplied AVFormatContext will be freed on failure.<br>
	 * @param url URL of the stream to open.<br>
	 * @param fmt If non-NULL, this parameter forces a specific input format.<br>
	 *            Otherwise the format is autodetected.<br>
	 * @param options  A dictionary filled with AVFormatContext and demuxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * @return 0 on success, a negative AVERROR on failure.<br>
	 * @note If you want to use custom IO, preallocate the format context and set its pb field.<br>
	 * Original signature : <code>int avformat_open_input(AVFormatContext**, const char*, AVInputFormat*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:712</i>
	 */
	int avformat_open_input(PointerByReference ps, String url, AVInputFormat fmt, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Open an input stream and read the header. The codecs are not opened.<br>
	 * The stream must be closed with avformat_close_input().<br>
	 * @param ps Pointer to user-supplied AVFormatContext (allocated by avformat_alloc_context).<br>
	 *           May be a pointer to NULL, in which case an AVFormatContext is allocated by this<br>
	 *           function and written into ps.<br>
	 *           Note that a user-supplied AVFormatContext will be freed on failure.<br>
	 * @param url URL of the stream to open.<br>
	 * @param fmt If non-NULL, this parameter forces a specific input format.<br>
	 *            Otherwise the format is autodetected.<br>
	 * @param options  A dictionary filled with AVFormatContext and demuxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * @return 0 on success, a negative AVERROR on failure.<br>
	 * @note If you want to use custom IO, preallocate the format context and set its pb field.<br>
	 * Original signature : <code>int avformat_open_input(AVFormatContext**, const char*, AVInputFormat*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:712</i>
	 */
	int avformat_open_input(AVFormatContext.ByReference ps[], Pointer url, AVInputFormat fmt, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Original signature : <code>int av_demuxer_open(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:714</i>
	 */
	int av_demuxer_open(AVFormatContext ic);
	/**
	 * Read packets of a media file to get stream information. This<br>
	 * is useful for file formats with no headers such as MPEG. This<br>
	 * function also computes the real framerate in case of MPEG-2 repeat<br>
	 * frame mode.<br>
	 * The logical file position is not changed by this function;<br>
	 * examined packets may be buffered for later processing.<br>
	 * @param ic media file handle<br>
	 * @param options  If non-NULL, an ic.nb_streams long array of pointers to<br>
	 *                 dictionaries, where i-th member contains options for<br>
	 *                 codec corresponding to i-th stream.<br>
	 *                 On return each dictionary will be filled with options that were not found.<br>
	 * @return >=0 if OK, AVERROR_xxx on error<br>
	 * @note this function isn't guaranteed to open all the codecs, so<br>
	 *       options being non-empty at return is a perfectly normal behavior.<br>
	 * @todo Let the user decide somehow what information is needed so that<br>
	 *       we do not waste time getting stuff the user does not need.<br>
	 * Original signature : <code>int avformat_find_stream_info(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:734</i><br>
	 * @deprecated use the safer method {@link #avformat_find_stream_info(org.ffmpeg.avformat57.AVFormatContext, org.ffmpeg.avutil55.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avformat_find_stream_info(AVFormatContext ic, PointerByReference options);
	/**
	 * Read packets of a media file to get stream information. This<br>
	 * is useful for file formats with no headers such as MPEG. This<br>
	 * function also computes the real framerate in case of MPEG-2 repeat<br>
	 * frame mode.<br>
	 * The logical file position is not changed by this function;<br>
	 * examined packets may be buffered for later processing.<br>
	 * @param ic media file handle<br>
	 * @param options  If non-NULL, an ic.nb_streams long array of pointers to<br>
	 *                 dictionaries, where i-th member contains options for<br>
	 *                 codec corresponding to i-th stream.<br>
	 *                 On return each dictionary will be filled with options that were not found.<br>
	 * @return >=0 if OK, AVERROR_xxx on error<br>
	 * @note this function isn't guaranteed to open all the codecs, so<br>
	 *       options being non-empty at return is a perfectly normal behavior.<br>
	 * @todo Let the user decide somehow what information is needed so that<br>
	 *       we do not waste time getting stuff the user does not need.<br>
	 * Original signature : <code>int avformat_find_stream_info(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:734</i>
	 */
	int avformat_find_stream_info(AVFormatContext ic, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Find the programs which belong to a given stream.<br>
	 * @param ic    media file handle<br>
	 * @param last  the last found program, the search will start after this<br>
	 *              program, or from the beginning if it is NULL<br>
	 * @param s     stream index<br>
	 * @return the next program which belongs to s, NULL if no program is found or<br>
	 *         the last program is not among the programs of ic.<br>
	 * Original signature : <code>AVProgram* av_find_program_from_stream(AVFormatContext*, AVProgram*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:745</i>
	 */
	AVProgram av_find_program_from_stream(AVFormatContext ic, AVProgram last, int s);
	/**
	 * Original signature : <code>void av_program_add_stream_index(AVFormatContext*, int, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:747</i>
	 */
	void av_program_add_stream_index(AVFormatContext ac, int progid, int idx);
	/**
	 * Find the "best" stream in the file.<br>
	 * The best stream is determined according to various heuristics as the most<br>
	 * likely to be what the user expects.<br>
	 * If the decoder parameter is non-NULL, av_find_best_stream will find the<br>
	 * default decoder for the stream's codec; streams for which no decoder can<br>
	 * be found are ignored.<br>
	 * @param ic                media file handle<br>
	 * @param type              stream type: video, audio, subtitles, etc.<br>
	 * @param wanted_stream_nb  user-requested stream number,<br>
	 *                          or -1 for automatic selection<br>
	 * @param related_stream    try to find a stream related (eg. in the same<br>
	 *                          program) to this one, or -1 if none<br>
	 * @param decoder_ret       if non-NULL, returns the decoder for the<br>
	 *                          selected stream<br>
	 * @param flags             flags; none are currently defined<br>
	 * @return  the non-negative stream number in case of success,<br>
	 *          AVERROR_STREAM_NOT_FOUND if no stream with the requested type<br>
	 *          could be found,<br>
	 *          AVERROR_DECODER_NOT_FOUND if streams were found but no decoder<br>
	 * @note  If av_find_best_stream returns successfully and decoder_ret is not<br>
	 *        NULL, then *decoder_ret is guaranteed to be set to a valid AVCodec.<br>
	 * Original signature : <code>int av_find_best_stream(AVFormatContext*, AVMediaType, int, int, AVCodec**, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:772</i><br>
	 * @deprecated use the safer method {@link #av_find_best_stream(org.ffmpeg.avformat57.AVFormatContext, int, int, int, org.ffmpeg.avcodec57.AVCodec.ByReference[], int)} instead
	 */
	@Deprecated 
	int av_find_best_stream(AVFormatContext ic, int type, int wanted_stream_nb, int related_stream, PointerByReference decoder_ret, int flags);
	/**
	 * Find the "best" stream in the file.<br>
	 * The best stream is determined according to various heuristics as the most<br>
	 * likely to be what the user expects.<br>
	 * If the decoder parameter is non-NULL, av_find_best_stream will find the<br>
	 * default decoder for the stream's codec; streams for which no decoder can<br>
	 * be found are ignored.<br>
	 * @param ic                media file handle<br>
	 * @param type              stream type: video, audio, subtitles, etc.<br>
	 * @param wanted_stream_nb  user-requested stream number,<br>
	 *                          or -1 for automatic selection<br>
	 * @param related_stream    try to find a stream related (eg. in the same<br>
	 *                          program) to this one, or -1 if none<br>
	 * @param decoder_ret       if non-NULL, returns the decoder for the<br>
	 *                          selected stream<br>
	 * @param flags             flags; none are currently defined<br>
	 * @return  the non-negative stream number in case of success,<br>
	 *          AVERROR_STREAM_NOT_FOUND if no stream with the requested type<br>
	 *          could be found,<br>
	 *          AVERROR_DECODER_NOT_FOUND if streams were found but no decoder<br>
	 * @note  If av_find_best_stream returns successfully and decoder_ret is not<br>
	 *        NULL, then *decoder_ret is guaranteed to be set to a valid AVCodec.<br>
	 * Original signature : <code>int av_find_best_stream(AVFormatContext*, AVMediaType, int, int, AVCodec**, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:772</i>
	 */
	int av_find_best_stream(AVFormatContext ic, int type, int wanted_stream_nb, int related_stream, AVCodec.ByReference decoder_ret[], int flags);
	/**
	 * Return the next frame of a stream.<br>
	 * This function returns what is stored in the file, and does not validate<br>
	 * that what is there are valid frames for the decoder. It will split what is<br>
	 * stored in the file into frames and return one for each call. It will not<br>
	 * omit invalid data between valid frames so as to give the decoder the maximum<br>
	 * information possible for decoding.<br>
	 * If pkt->buf is NULL, then the packet is valid until the next<br>
	 * av_read_frame() or until avformat_close_input(). Otherwise the packet<br>
	 * is valid indefinitely. In both cases the packet must be freed with<br>
	 * av_packet_unref when it is no longer needed. For video, the packet contains<br>
	 * exactly one frame. For audio, it contains an integer number of frames if each<br>
	 * frame has a known fixed size (e.g. PCM or ADPCM data). If the audio frames<br>
	 * have a variable size (e.g. MPEG audio), then it contains one frame.<br>
	 * pkt->pts, pkt->dts and pkt->duration are always set to correct<br>
	 * values in AVStream.time_base units (and guessed if the format cannot<br>
	 * provide them). pkt->pts can be AV_NOPTS_VALUE if the video format<br>
	 * has B-frames, so it is better to rely on pkt->dts if you do not<br>
	 * decompress the payload.<br>
	 * @return 0 if OK, < 0 on error or end of file<br>
	 * Original signature : <code>int av_read_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:795</i>
	 */
	int av_read_frame(AVFormatContext s, AVPacket pkt);
	/**
	 * Seek to the keyframe at timestamp.<br>
	 * 'timestamp' in 'stream_index'.<br>
	 * @param s media file handle<br>
	 * @param stream_index If stream_index is (-1), a default<br>
	 * stream is selected, and timestamp is automatically converted<br>
	 * from AV_TIME_BASE units to the stream specific time_base.<br>
	 * @param timestamp Timestamp in AVStream.time_base units<br>
	 *        or, if no stream is specified, in AV_TIME_BASE units.<br>
	 * @param flags flags which select direction and seeking mode<br>
	 * @return >= 0 on success<br>
	 * Original signature : <code>int av_seek_frame(AVFormatContext*, int, int64_t, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:809</i>
	 */
	int av_seek_frame(AVFormatContext s, int stream_index, long timestamp, int flags);
	/**
	 * Seek to timestamp ts.<br>
	 * Seeking will be done so that the point from which all active streams<br>
	 * can be presented successfully will be closest to ts and within min/max_ts.<br>
	 * Active streams are all streams that have AVStream.discard < AVDISCARD_ALL.<br>
	 * If flags contain AVSEEK_FLAG_BYTE, then all timestamps are in bytes and<br>
	 * are the file position (this may not be supported by all demuxers).<br>
	 * If flags contain AVSEEK_FLAG_FRAME, then all timestamps are in frames<br>
	 * in the stream with stream_index (this may not be supported by all demuxers).<br>
	 * Otherwise all timestamps are in units of the stream selected by stream_index<br>
	 * or if stream_index is -1, in AV_TIME_BASE units.<br>
	 * If flags contain AVSEEK_FLAG_ANY, then non-keyframes are treated as<br>
	 * keyframes (this may not be supported by all demuxers).<br>
	 * If flags contain AVSEEK_FLAG_BACKWARD, it is ignored.<br>
	 * @param s media file handle<br>
	 * @param stream_index index of the stream which is used as time base reference<br>
	 * @param min_ts smallest acceptable timestamp<br>
	 * @param ts target timestamp<br>
	 * @param max_ts largest acceptable timestamp<br>
	 * @param flags flags<br>
	 * @return >=0 on success, error code otherwise<br>
	 * @note This is part of the new seek API which is still under construction.<br>
	 *       Thus do not use this yet. It may change at any time, do not expect<br>
	 *       ABI compatibility yet!<br>
	 * Original signature : <code>int avformat_seek_file(AVFormatContext*, int, int64_t, int64_t, int64_t, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:836</i>
	 */
	int avformat_seek_file(AVFormatContext s, int stream_index, long min_ts, long ts, long max_ts, int flags);
	/**
	 * Discard all internally buffered data. This can be useful when dealing with<br>
	 * discontinuities in the byte stream. Generally works only with formats that<br>
	 * can resync. This includes headerless formats like MPEG-TS/TS but should also<br>
	 * work with NUT, Ogg and in a limited way AVI for example.<br>
	 * The set of streams, the detected duration, stream parameters and codecs do<br>
	 * not change when calling this function. If you want a complete reset, it's<br>
	 * better to open a new AVFormatContext.<br>
	 * This does not flush the AVIOContext (s->pb). If necessary, call<br>
	 * avio_flush(s->pb) before calling this function.<br>
	 * @param s media file handle<br>
	 * @return >=0 on success, error code otherwise<br>
	 * Original signature : <code>int avformat_flush(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:851</i>
	 */
	int avformat_flush(AVFormatContext s);
	/**
	 * Start playing a network-based stream (e.g. RTSP stream) at the<br>
	 * current position.<br>
	 * Original signature : <code>int av_read_play(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:857</i>
	 */
	int av_read_play(AVFormatContext s);
	/**
	 * Pause a network-based stream (e.g. RTSP stream).<br>
	 * Use av_read_play() to resume it.<br>
	 * Original signature : <code>int av_read_pause(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:863</i>
	 */
	int av_read_pause(AVFormatContext s);
	/**
	 * Close an opened input AVFormatContext. Free it and all its contents<br>
	 * and set *s to NULL.<br>
	 * Original signature : <code>void avformat_close_input(AVFormatContext**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:869</i><br>
	 * use the safer method {@link #avformat_close_input(org.ffmpeg.avformat57.AVFormatContext.ByReference[])} instead
	 */
	void avformat_close_input(PointerByReference s);
	/**
	 * Close an opened input AVFormatContext. Free it and all its contents<br>
	 * and set *s to NULL.<br>
	 * Original signature : <code>void avformat_close_input(AVFormatContext**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:869</i>
	 */
	void avformat_close_input(AVFormatContext.ByReference s[]);
	/**
	 * Allocate the stream private data and write the stream header to<br>
	 * an output media file.<br>
	 * @param s Media file handle, must be allocated with avformat_alloc_context().<br>
	 *          Its oformat field must be set to the desired output format;<br>
	 *          Its pb field must be set to an already opened AVIOContext.<br>
	 * @param options  An AVDictionary filled with AVFormatContext and muxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * @return AVSTREAM_INIT_IN_WRITE_HEADER on success if the codec had not already been fully initialized in avformat_init,<br>
	 *         AVSTREAM_INIT_IN_INIT_OUTPUT  on success if the codec had already been fully initialized in avformat_init,<br>
	 *         negative AVERROR on failure.<br>
	 * @see av_opt_find, av_dict_set, avio_open, av_oformat_next, avformat_init_output.<br>
	 * Original signature : <code>int avformat_write_header(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:885</i><br>
	 * @deprecated use the safer method {@link #avformat_write_header(org.ffmpeg.avformat57.AVFormatContext, org.ffmpeg.avutil55.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avformat_write_header(AVFormatContext s, PointerByReference options);
	/**
	 * Allocate the stream private data and write the stream header to<br>
	 * an output media file.<br>
	 * @param s Media file handle, must be allocated with avformat_alloc_context().<br>
	 *          Its oformat field must be set to the desired output format;<br>
	 *          Its pb field must be set to an already opened AVIOContext.<br>
	 * @param options  An AVDictionary filled with AVFormatContext and muxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * @return AVSTREAM_INIT_IN_WRITE_HEADER on success if the codec had not already been fully initialized in avformat_init,<br>
	 *         AVSTREAM_INIT_IN_INIT_OUTPUT  on success if the codec had already been fully initialized in avformat_init,<br>
	 *         negative AVERROR on failure.<br>
	 * @see av_opt_find, av_dict_set, avio_open, av_oformat_next, avformat_init_output.<br>
	 * Original signature : <code>int avformat_write_header(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:885</i>
	 */
	int avformat_write_header(AVFormatContext s, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Allocate the stream private data and initialize the codec, but do not write the header.<br>
	 * May optionally be used before avformat_write_header to initialize stream parameters<br>
	 * before actually writing the header.<br>
	 * If using this function, do not pass the same options to avformat_write_header.<br>
	 * @param s Media file handle, must be allocated with avformat_alloc_context().<br>
	 *          Its oformat field must be set to the desired output format;<br>
	 *          Its pb field must be set to an already opened AVIOContext.<br>
	 * @param options  An AVDictionary filled with AVFormatContext and muxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * @return AVSTREAM_INIT_IN_WRITE_HEADER on success if the codec requires avformat_write_header to fully initialize,<br>
	 *         AVSTREAM_INIT_IN_INIT_OUTPUT  on success if the codec has been fully initialized,<br>
	 *         negative AVERROR on failure.<br>
	 * @see av_opt_find, av_dict_set, avio_open, av_oformat_next, avformat_write_header.<br>
	 * Original signature : <code>int avformat_init_output(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:903</i><br>
	 * @deprecated use the safer method {@link #avformat_init_output(org.ffmpeg.avformat57.AVFormatContext, org.ffmpeg.avutil55.AVDictionary.ByReference[])} instead
	 */
	@Deprecated 
	int avformat_init_output(AVFormatContext s, PointerByReference options);
	/**
	 * Allocate the stream private data and initialize the codec, but do not write the header.<br>
	 * May optionally be used before avformat_write_header to initialize stream parameters<br>
	 * before actually writing the header.<br>
	 * If using this function, do not pass the same options to avformat_write_header.<br>
	 * @param s Media file handle, must be allocated with avformat_alloc_context().<br>
	 *          Its oformat field must be set to the desired output format;<br>
	 *          Its pb field must be set to an already opened AVIOContext.<br>
	 * @param options  An AVDictionary filled with AVFormatContext and muxer-private options.<br>
	 *                 On return this parameter will be destroyed and replaced with a dict containing<br>
	 *                 options that were not found. May be NULL.<br>
	 * @return AVSTREAM_INIT_IN_WRITE_HEADER on success if the codec requires avformat_write_header to fully initialize,<br>
	 *         AVSTREAM_INIT_IN_INIT_OUTPUT  on success if the codec has been fully initialized,<br>
	 *         negative AVERROR on failure.<br>
	 * @see av_opt_find, av_dict_set, avio_open, av_oformat_next, avformat_write_header.<br>
	 * Original signature : <code>int avformat_init_output(AVFormatContext*, AVDictionary**)</code><br>
	 * <i>native declaration : libavformat\avformat.h:903</i>
	 */
	int avformat_init_output(AVFormatContext s, org.ffmpeg.avutil55.AVDictionary.ByReference options[]);
	/**
	 * Write a packet to an output media file.<br>
	 * This function passes the packet directly to the muxer, without any buffering<br>
	 * or reordering. The caller is responsible for correctly interleaving the<br>
	 * packets if the format requires it. Callers that want libavformat to handle<br>
	 * the interleaving should call av_interleaved_write_frame() instead of this<br>
	 * function.<br>
	 * @param s media file handle<br>
	 * @param pkt The packet containing the data to be written. Note that unlike<br>
	 *            av_interleaved_write_frame(), this function does not take<br>
	 *            ownership of the packet passed to it (though some muxers may make<br>
	 *            an internal reference to the input packet).<br>
	 *            <br>
	 *            This parameter can be NULL (at any time, not just at the end), in<br>
	 *            order to immediately flush data buffered within the muxer, for<br>
	 *            muxers that buffer up data internally before writing it to the<br>
	 *            output.<br>
	 *            <br>
	 *            Packet's @ref AVPacket.stream_index "stream_index" field must be<br>
	 *            set to the index of the corresponding stream in @ref<br>
	 *            AVFormatContext.streams "s->streams".<br>
	 *            <br>
	 *            The timestamps (@ref AVPacket.pts "pts", @ref AVPacket.dts "dts")<br>
	 *            must be set to correct values in the stream's timebase (unless the<br>
	 *            output format is flagged with the AVFMT_NOTIMESTAMPS flag, then<br>
	 *            they can be set to AV_NOPTS_VALUE).<br>
	 *            The dts for subsequent packets passed to this function must be strictly<br>
	 *            increasing when compared in their respective timebases (unless the<br>
	 *            output format is flagged with the AVFMT_TS_NONSTRICT, then they<br>
	 *            merely have to be nondecreasing).  @ref AVPacket.duration<br>
	 *            "duration") should also be set if known.<br>
	 * @return < 0 on error, = 0 if OK, 1 if flushed and there is no more data to flush<br>
	 * @see av_interleaved_write_frame()<br>
	 * Original signature : <code>int av_write_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:939</i>
	 */
	int av_write_frame(AVFormatContext s, AVPacket pkt);
	/**
	 * Write a packet to an output media file ensuring correct interleaving.<br>
	 * This function will buffer the packets internally as needed to make sure the<br>
	 * packets in the output file are properly interleaved in the order of<br>
	 * increasing dts. Callers doing their own interleaving should call<br>
	 * av_write_frame() instead of this function.<br>
	 * Using this function instead of av_write_frame() can give muxers advance<br>
	 * knowledge of future packets, improving e.g. the behaviour of the mp4<br>
	 * muxer for VFR content in fragmenting mode.<br>
	 * @param s media file handle<br>
	 * @param pkt The packet containing the data to be written.<br>
	 *            <br>
	 *            If the packet is reference-counted, this function will take<br>
	 *            ownership of this reference and unreference it later when it sees<br>
	 *            fit.<br>
	 *            The caller must not access the data through this reference after<br>
	 *            this function returns. If the packet is not reference-counted,<br>
	 *            libavformat will make a copy.<br>
	 *            <br>
	 *            This parameter can be NULL (at any time, not just at the end), to<br>
	 *            flush the interleaving queues.<br>
	 *            <br>
	 *            Packet's @ref AVPacket.stream_index "stream_index" field must be<br>
	 *            set to the index of the corresponding stream in @ref<br>
	 *            AVFormatContext.streams "s->streams".<br>
	 *            <br>
	 *            The timestamps (@ref AVPacket.pts "pts", @ref AVPacket.dts "dts")<br>
	 *            must be set to correct values in the stream's timebase (unless the<br>
	 *            output format is flagged with the AVFMT_NOTIMESTAMPS flag, then<br>
	 *            they can be set to AV_NOPTS_VALUE).<br>
	 *            The dts for subsequent packets in one stream must be strictly<br>
	 *            increasing (unless the output format is flagged with the<br>
	 *            AVFMT_TS_NONSTRICT, then they merely have to be nondecreasing).<br>
	 *            @ref AVPacket.duration "duration") should also be set if known.<br>
	 * @return 0 on success, a negative AVERROR on error. Libavformat will always<br>
	 *         take care of freeing the packet, even if this function fails.<br>
	 * @see av_write_frame(), AVFormatContext.max_interleave_delta<br>
	 * Original signature : <code>int av_interleaved_write_frame(AVFormatContext*, AVPacket*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:979</i>
	 */
	int av_interleaved_write_frame(AVFormatContext s, AVPacket pkt);
	/**
	 * Write an uncoded frame to an output media file.<br>
	 * The frame must be correctly interleaved according to the container<br>
	 * specification; if not, then av_interleaved_write_frame() must be used.<br>
	 * See av_interleaved_write_frame() for details.<br>
	 * Original signature : <code>int av_write_uncoded_frame(AVFormatContext*, int, AVFrame*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:987</i>
	 */
	int av_write_uncoded_frame(AVFormatContext s, int stream_index, AVFrame frame);
	/**
	 * Write an uncoded frame to an output media file.<br>
	 * If the muxer supports it, this function makes it possible to write an AVFrame<br>
	 * structure directly, without encoding it into a packet.<br>
	 * It is mostly useful for devices and similar special muxers that use raw<br>
	 * video or PCM data and will not serialize it into a byte stream.<br>
	 * To test whether it is possible to use it with a given muxer and stream,<br>
	 * use av_write_uncoded_frame_query().<br>
	 * The caller gives up ownership of the frame and must not access it<br>
	 * afterwards.<br>
	 * @return  >=0 for success, a negative code on error<br>
	 * Original signature : <code>int av_interleaved_write_uncoded_frame(AVFormatContext*, int, AVFrame*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1001</i>
	 */
	int av_interleaved_write_uncoded_frame(AVFormatContext s, int stream_index, AVFrame frame);
	/**
	 * Test whether a muxer supports uncoded frame.<br>
	 * @return  >=0 if an uncoded frame can be written to that muxer and stream,<br>
	 *          <0 if not<br>
	 * Original signature : <code>int av_write_uncoded_frame_query(AVFormatContext*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1008</i>
	 */
	int av_write_uncoded_frame_query(AVFormatContext s, int stream_index);
	/**
	 * Write the stream trailer to an output media file and free the<br>
	 * file private data.<br>
	 * May only be called after a successful call to avformat_write_header.<br>
	 * @param s media file handle<br>
	 * @return 0 if OK, AVERROR_xxx on error<br>
	 * Original signature : <code>int av_write_trailer(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1017</i>
	 */
	int av_write_trailer(AVFormatContext s);
	/**
	 * Return the output format in the list of registered output formats<br>
	 * which best matches the provided parameters, or return NULL if<br>
	 * there is no match.<br>
	 * @param short_name if non-NULL checks if short_name matches with the<br>
	 * names of the registered formats<br>
	 * @param filename if non-NULL checks if filename terminates with the<br>
	 * extensions of the registered formats<br>
	 * @param mime_type if non-NULL checks if mime_type matches with the<br>
	 * MIME type of the registered formats<br>
	 * Original signature : <code>AVOutputFormat* av_guess_format(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1030</i><br>
	 * @deprecated use the safer methods {@link #av_guess_format(String, String, String)} and {@link #av_guess_format(Pointer, Pointer, Pointer)} instead
	 */
	@Deprecated 
	AVOutputFormat av_guess_format(Pointer short_name, Pointer filename, Pointer mime_type);
	/**
	 * Return the output format in the list of registered output formats<br>
	 * which best matches the provided parameters, or return NULL if<br>
	 * there is no match.<br>
	 * @param short_name if non-NULL checks if short_name matches with the<br>
	 * names of the registered formats<br>
	 * @param filename if non-NULL checks if filename terminates with the<br>
	 * extensions of the registered formats<br>
	 * @param mime_type if non-NULL checks if mime_type matches with the<br>
	 * MIME type of the registered formats<br>
	 * Original signature : <code>AVOutputFormat* av_guess_format(const char*, const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1030</i>
	 */
	AVOutputFormat av_guess_format(String short_name, String filename, String mime_type);
	/**
	 * Guess the codec ID based upon muxer and filename.<br>
	 * Original signature : <code>AVCodecID av_guess_codec(AVOutputFormat*, const char*, const char*, const char*, AVMediaType)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1035</i><br>
	 * @deprecated use the safer methods {@link #av_guess_codec(org.ffmpeg.avformat57.AVOutputFormat, String, String, String, int)} and {@link #av_guess_codec(org.ffmpeg.avformat57.AVOutputFormat, Pointer, Pointer, Pointer, int)} instead
	 */
	@Deprecated 
	int av_guess_codec(AVOutputFormat fmt, Pointer short_name, Pointer filename, Pointer mime_type, int type);
	/**
	 * Guess the codec ID based upon muxer and filename.<br>
	 * Original signature : <code>AVCodecID av_guess_codec(AVOutputFormat*, const char*, const char*, const char*, AVMediaType)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1035</i>
	 */
	int av_guess_codec(AVOutputFormat fmt, String short_name, String filename, String mime_type, int type);
	/**
	 * Get timing information for the data currently output.<br>
	 * The exact meaning of "currently output" depends on the format.<br>
	 * It is mostly relevant for devices that have an internal buffer and/or<br>
	 * work in real time.<br>
	 * @param s          media file handle<br>
	 * @param stream     stream in the media file<br>
	 * @param[out] dts   DTS of the last packet output for the stream, in stream<br>
	 *                   time_base units<br>
	 * @param[out] wall  absolute time when that packet whas output,<br>
	 *                   in microsecond<br>
	 * @return  0 if OK, AVERROR(ENOSYS) if the format does not support it<br>
	 * Note: some formats or devices may not allow to measure dts and wall<br>
	 * atomically.<br>
	 * Original signature : <code>int av_get_output_timestamp(AVFormatContext*, int, int64_t*, int64_t*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1052</i><br>
	 * @deprecated use the safer methods {@link #av_get_output_timestamp(org.ffmpeg.avformat57.AVFormatContext, int, LongBuffer, LongBuffer)} and {@link #av_get_output_timestamp(org.ffmpeg.avformat57.AVFormatContext, int, LongByReference, LongByReference)} instead
	 */
	@Deprecated 
	int av_get_output_timestamp(AVFormatContext s, int stream, LongByReference dts, LongByReference wall);
	/**
	 * Get timing information for the data currently output.<br>
	 * The exact meaning of "currently output" depends on the format.<br>
	 * It is mostly relevant for devices that have an internal buffer and/or<br>
	 * work in real time.<br>
	 * @param s          media file handle<br>
	 * @param stream     stream in the media file<br>
	 * @param[out] dts   DTS of the last packet output for the stream, in stream<br>
	 *                   time_base units<br>
	 * @param[out] wall  absolute time when that packet whas output,<br>
	 *                   in microsecond<br>
	 * @return  0 if OK, AVERROR(ENOSYS) if the format does not support it<br>
	 * Note: some formats or devices may not allow to measure dts and wall<br>
	 * atomically.<br>
	 * Original signature : <code>int av_get_output_timestamp(AVFormatContext*, int, int64_t*, int64_t*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1052</i>
	 */
	int av_get_output_timestamp(AVFormatContext s, int stream, LongBuffer dts, LongBuffer wall);
	/**
	 * Send a nice hexadecimal dump of a buffer to the specified file stream.<br>
	 * @param f The file stream pointer where the dump should be sent to.<br>
	 * @param buf buffer<br>
	 * @param size buffer size<br>
	 * @see av_hex_dump_log, av_pkt_dump2, av_pkt_dump_log2<br>
	 * Original signature : <code>void av_hex_dump(FILE*, const uint8_t*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1061</i><br>
	 * @deprecated use the safer methods {@link #av_hex_dump(org.ffmpeg.avformat57.Avformat57Library.FILE, byte[], int)} and {@link #av_hex_dump(org.ffmpeg.avformat57.Avformat57Library.FILE, Pointer, int)} instead
	 */
	@Deprecated 
	void av_hex_dump(FILE f, Pointer buf, int size);
	/**
	 * Send a nice hexadecimal dump of a buffer to the specified file stream.<br>
	 * @param f The file stream pointer where the dump should be sent to.<br>
	 * @param buf buffer<br>
	 * @param size buffer size<br>
	 * @see av_hex_dump_log, av_pkt_dump2, av_pkt_dump_log2<br>
	 * Original signature : <code>void av_hex_dump(FILE*, const uint8_t*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1061</i>
	 */
	void av_hex_dump(FILE f, byte buf[], int size);
	/**
	 * Send a nice hexadecimal dump of a buffer to the log.<br>
	 * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 * pointer to an AVClass struct.<br>
	 * @param level The importance level of the message, lower values signifying<br>
	 * higher importance.<br>
	 * @param buf buffer<br>
	 * @param size buffer size<br>
	 * @see av_hex_dump, av_pkt_dump2, av_pkt_dump_log2<br>
	 * Original signature : <code>void av_hex_dump_log(void*, int, const uint8_t*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1073</i><br>
	 * @deprecated use the safer methods {@link #av_hex_dump_log(Pointer, int, byte[], int)} and {@link #av_hex_dump_log(Pointer, int, Pointer, int)} instead
	 */
	@Deprecated 
	void av_hex_dump_log(Pointer avcl, int level, Pointer buf, int size);
	/**
	 * Send a nice hexadecimal dump of a buffer to the log.<br>
	 * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 * pointer to an AVClass struct.<br>
	 * @param level The importance level of the message, lower values signifying<br>
	 * higher importance.<br>
	 * @param buf buffer<br>
	 * @param size buffer size<br>
	 * @see av_hex_dump, av_pkt_dump2, av_pkt_dump_log2<br>
	 * Original signature : <code>void av_hex_dump_log(void*, int, const uint8_t*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1073</i>
	 */
	void av_hex_dump_log(Pointer avcl, int level, byte buf[], int size);
	/**
	 * Send a nice dump of a packet to the specified file stream.<br>
	 * @param f The file stream pointer where the dump should be sent to.<br>
	 * @param pkt packet to dump<br>
	 * @param dump_payload True if the payload must be displayed, too.<br>
	 * @param st AVStream that the packet belongs to<br>
	 * Original signature : <code>void av_pkt_dump2(FILE*, const AVPacket*, int, const AVStream*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1082</i>
	 */
	void av_pkt_dump2(FILE f, AVPacket pkt, int dump_payload, AVStream st);
	/**
	 * Send a nice dump of a packet to the log.<br>
	 * @param avcl A pointer to an arbitrary struct of which the first field is a<br>
	 * pointer to an AVClass struct.<br>
	 * @param level The importance level of the message, lower values signifying<br>
	 * higher importance.<br>
	 * @param pkt packet to dump<br>
	 * @param dump_payload True if the payload must be displayed, too.<br>
	 * @param st AVStream that the packet belongs to<br>
	 * Original signature : <code>void av_pkt_dump_log2(void*, int, const AVPacket*, int, const AVStream*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1094</i>
	 */
	void av_pkt_dump_log2(Pointer avcl, int level, AVPacket pkt, int dump_payload, AVStream st);
	/**
	 * Get the AVCodecID for the given codec tag tag.<br>
	 * If no codec id is found returns AV_CODEC_ID_NONE.<br>
	 * @param tags list of supported codec_id-codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param tag  codec tag to match to a codec ID<br>
	 * Original signature : <code>AVCodecID av_codec_get_id(const AVCodecTag**, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1103</i><br>
	 * @deprecated use the safer method {@link #av_codec_get_id(org.ffmpeg.avformat57.AVCodecTag.ByReference[], int)} instead
	 */
	@Deprecated 
	int av_codec_get_id(PointerByReference tags, int tag);
	/**
	 * Get the AVCodecID for the given codec tag tag.<br>
	 * If no codec id is found returns AV_CODEC_ID_NONE.<br>
	 * @param tags list of supported codec_id-codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param tag  codec tag to match to a codec ID<br>
	 * Original signature : <code>AVCodecID av_codec_get_id(const AVCodecTag**, unsigned int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1103</i>
	 */
	int av_codec_get_id(AVCodecTag.ByReference tags[], int tag);
	/**
	 * Get the codec tag for the given codec id id.<br>
	 * If no codec tag is found returns 0.<br>
	 * @param tags list of supported codec_id-codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param id   codec ID to match to a codec tag<br>
	 * Original signature : <code>int av_codec_get_tag(const AVCodecTag**, AVCodecID)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1112</i><br>
	 * @deprecated use the safer method {@link #av_codec_get_tag(org.ffmpeg.avformat57.AVCodecTag.ByReference[], int)} instead
	 */
	@Deprecated 
	int av_codec_get_tag(PointerByReference tags, int id);
	/**
	 * Get the codec tag for the given codec id id.<br>
	 * If no codec tag is found returns 0.<br>
	 * @param tags list of supported codec_id-codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param id   codec ID to match to a codec tag<br>
	 * Original signature : <code>int av_codec_get_tag(const AVCodecTag**, AVCodecID)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1112</i>
	 */
	int av_codec_get_tag(AVCodecTag.ByReference tags[], int id);
	/**
	 * Get the codec tag for the given codec id.<br>
	 * @param tags list of supported codec_id - codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param id codec id that should be searched for in the list<br>
	 * @param tag A pointer to the found tag<br>
	 * @return 0 if id was not found in tags, > 0 if it was found<br>
	 * Original signature : <code>int av_codec_get_tag2(const AVCodecTag**, AVCodecID, unsigned int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1122</i><br>
	 * @deprecated use the safer methods {@link #av_codec_get_tag2(org.ffmpeg.avformat57.AVCodecTag.ByReference[], int, IntBuffer)} and {@link #av_codec_get_tag2(org.ffmpeg.avformat57.AVCodecTag.ByReference[], int, IntByReference)} instead
	 */
	@Deprecated 
	int av_codec_get_tag2(PointerByReference tags, int id, IntByReference tag);
	/**
	 * Get the codec tag for the given codec id.<br>
	 * @param tags list of supported codec_id - codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param id codec id that should be searched for in the list<br>
	 * @param tag A pointer to the found tag<br>
	 * @return 0 if id was not found in tags, > 0 if it was found<br>
	 * Original signature : <code>int av_codec_get_tag2(const AVCodecTag**, AVCodecID, unsigned int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1122</i>
	 */
	int av_codec_get_tag2(AVCodecTag.ByReference tags[], int id, IntBuffer tag);
	/**
	 * Get the codec tag for the given codec id.<br>
	 * @param tags list of supported codec_id - codec_tag pairs, as stored<br>
	 * in AVInputFormat.codec_tag and AVOutputFormat.codec_tag<br>
	 * @param id codec id that should be searched for in the list<br>
	 * @param tag A pointer to the found tag<br>
	 * @return 0 if id was not found in tags, > 0 if it was found<br>
	 * Original signature : <code>int av_codec_get_tag2(const AVCodecTag**, AVCodecID, unsigned int*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1122</i>
	 */
	int av_codec_get_tag2(AVCodecTag.ByReference tags[], int id, IntByReference tag);
	/**
	 * Original signature : <code>int av_find_default_stream_index(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1124</i>
	 */
	int av_find_default_stream_index(AVFormatContext s);
	/**
	 * Get the index for a specific timestamp.<br>
	 * @param st        stream that the timestamp belongs to<br>
	 * @param timestamp timestamp to retrieve the index for<br>
	 * @param flags if AVSEEK_FLAG_BACKWARD then the returned index will correspond<br>
	 *                 to the timestamp which is <= the requested one, if backward<br>
	 *                 is 0, then it will be >=<br>
	 *              if AVSEEK_FLAG_ANY seek to any frame, only keyframes otherwise<br>
	 * @return < 0 if no such timestamp could be found<br>
	 * Original signature : <code>int av_index_search_timestamp(AVStream*, int64_t, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1136</i>
	 */
	int av_index_search_timestamp(AVStream st, long timestamp, int flags);
	/**
	 * Add an index entry into a sorted list. Update the entry if the list<br>
	 * already contains it.<br>
	 * @param timestamp timestamp in the time base of the given stream<br>
	 * Original signature : <code>int av_add_index_entry(AVStream*, int64_t, int64_t, int, int, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1143</i>
	 */
	int av_add_index_entry(AVStream st, long pos, long timestamp, int size, int distance, int flags);
	/**
	 * Split a URL string into components.<br>
	 * The pointers to buffers for storing individual components may be null,<br>
	 * in order to ignore that component. Buffers for components not found are<br>
	 * set to empty strings. If the port is not found, it is set to a negative<br>
	 * value.<br>
	 * @param proto the buffer for the protocol<br>
	 * @param proto_size the size of the proto buffer<br>
	 * @param authorization the buffer for the authorization<br>
	 * @param authorization_size the size of the authorization buffer<br>
	 * @param hostname the buffer for the host name<br>
	 * @param hostname_size the size of the hostname buffer<br>
	 * @param port_ptr a pointer to store the port number in<br>
	 * @param path the buffer for the path<br>
	 * @param path_size the size of the path buffer<br>
	 * @param url the URL to split<br>
	 * Original signature : <code>void av_url_split(char*, int, char*, int, char*, int, int*, char*, int, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1162</i><br>
	 * @deprecated use the safer methods {@link #av_url_split(ByteBuffer, int, ByteBuffer, int, ByteBuffer, int, IntBuffer, ByteBuffer, int, String)} and {@link #av_url_split(Pointer, int, Pointer, int, Pointer, int, IntByReference, Pointer, int, Pointer)} instead
	 */
	@Deprecated 
	void av_url_split(Pointer proto, int proto_size, Pointer authorization, int authorization_size, Pointer hostname, int hostname_size, IntByReference port_ptr, Pointer path, int path_size, Pointer url);
	/**
	 * Split a URL string into components.<br>
	 * The pointers to buffers for storing individual components may be null,<br>
	 * in order to ignore that component. Buffers for components not found are<br>
	 * set to empty strings. If the port is not found, it is set to a negative<br>
	 * value.<br>
	 * @param proto the buffer for the protocol<br>
	 * @param proto_size the size of the proto buffer<br>
	 * @param authorization the buffer for the authorization<br>
	 * @param authorization_size the size of the authorization buffer<br>
	 * @param hostname the buffer for the host name<br>
	 * @param hostname_size the size of the hostname buffer<br>
	 * @param port_ptr a pointer to store the port number in<br>
	 * @param path the buffer for the path<br>
	 * @param path_size the size of the path buffer<br>
	 * @param url the URL to split<br>
	 * Original signature : <code>void av_url_split(char*, int, char*, int, char*, int, int*, char*, int, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1162</i>
	 */
	void av_url_split(ByteBuffer proto, int proto_size, ByteBuffer authorization, int authorization_size, ByteBuffer hostname, int hostname_size, IntBuffer port_ptr, ByteBuffer path, int path_size, String url);
	/**
	 * Print detailed information about the input or output format, such as<br>
	 * duration, bitrate, streams, container, programs, metadata, side data,<br>
	 * codec and time base.<br>
	 * @param ic        the context to analyze<br>
	 * @param index     index of the stream to dump information about<br>
	 * @param url       the URL to print, such as source or destination file<br>
	 * @param is_output Select whether the specified context is an input(0) or output(1)<br>
	 * Original signature : <code>void av_dump_format(AVFormatContext*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1173</i><br>
	 * @deprecated use the safer methods {@link #av_dump_format(org.ffmpeg.avformat57.AVFormatContext, int, String, int)} and {@link #av_dump_format(org.ffmpeg.avformat57.AVFormatContext, int, Pointer, int)} instead
	 */
	@Deprecated 
	void av_dump_format(AVFormatContext ic, int index, Pointer url, int is_output);
	/**
	 * Print detailed information about the input or output format, such as<br>
	 * duration, bitrate, streams, container, programs, metadata, side data,<br>
	 * codec and time base.<br>
	 * @param ic        the context to analyze<br>
	 * @param index     index of the stream to dump information about<br>
	 * @param url       the URL to print, such as source or destination file<br>
	 * @param is_output Select whether the specified context is an input(0) or output(1)<br>
	 * Original signature : <code>void av_dump_format(AVFormatContext*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1173</i>
	 */
	void av_dump_format(AVFormatContext ic, int index, String url, int is_output);
	/**
	 * Return in 'buf' the path with '%d' replaced by a number.<br>
	 * Also handles the '%0nd' format where 'n' is the total number<br>
	 * of digits and '%%'.<br>
	 * @param buf destination buffer<br>
	 * @param buf_size destination buffer size<br>
	 * @param path numbered sequence string<br>
	 * @param number frame number<br>
	 * @param flags AV_FRAME_FILENAME_FLAGS_*<br>
	 * @return 0 if OK, -1 on format error<br>
	 * Original signature : <code>int av_get_frame_filename2(char*, int, const char*, int, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1186</i><br>
	 * @deprecated use the safer methods {@link #av_get_frame_filename2(ByteBuffer, int, String, int, int)} and {@link #av_get_frame_filename2(Pointer, int, Pointer, int, int)} instead
	 */
	@Deprecated 
	int av_get_frame_filename2(Pointer buf, int buf_size, Pointer path, int number, int flags);
	/**
	 * Return in 'buf' the path with '%d' replaced by a number.<br>
	 * Also handles the '%0nd' format where 'n' is the total number<br>
	 * of digits and '%%'.<br>
	 * @param buf destination buffer<br>
	 * @param buf_size destination buffer size<br>
	 * @param path numbered sequence string<br>
	 * @param number frame number<br>
	 * @param flags AV_FRAME_FILENAME_FLAGS_*<br>
	 * @return 0 if OK, -1 on format error<br>
	 * Original signature : <code>int av_get_frame_filename2(char*, int, const char*, int, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1186</i>
	 */
	int av_get_frame_filename2(ByteBuffer buf, int buf_size, String path, int number, int flags);
	/**
	 * Original signature : <code>int av_get_frame_filename(char*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1188</i><br>
	 * @deprecated use the safer methods {@link #av_get_frame_filename(ByteBuffer, int, String, int)} and {@link #av_get_frame_filename(Pointer, int, Pointer, int)} instead
	 */
	@Deprecated 
	int av_get_frame_filename(Pointer buf, int buf_size, Pointer path, int number);
	/**
	 * Original signature : <code>int av_get_frame_filename(char*, int, const char*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1188</i>
	 */
	int av_get_frame_filename(ByteBuffer buf, int buf_size, String path, int number);
	/**
	 * Check whether filename actually is a numbered sequence generator.<br>
	 * @param filename possible numbered sequence string<br>
	 * @return 1 if a valid numbered sequence string, 0 otherwise<br>
	 * Original signature : <code>int av_filename_number_test(const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1195</i><br>
	 * @deprecated use the safer methods {@link #av_filename_number_test(String)} and {@link #av_filename_number_test(Pointer)} instead
	 */
	@Deprecated 
	int av_filename_number_test(Pointer filename);
	/**
	 * Check whether filename actually is a numbered sequence generator.<br>
	 * @param filename possible numbered sequence string<br>
	 * @return 1 if a valid numbered sequence string, 0 otherwise<br>
	 * Original signature : <code>int av_filename_number_test(const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1195</i>
	 */
	int av_filename_number_test(String filename);
	/**
	 * Generate an SDP for an RTP session.<br>
	 * Note, this overwrites the id values of AVStreams in the muxer contexts<br>
	 * for getting unique dynamic payload types.<br>
	 * @param ac array of AVFormatContexts describing the RTP streams. If the<br>
	 *           array is composed by only one context, such context can contain<br>
	 *           multiple AVStreams (one AVStream per RTP stream). Otherwise,<br>
	 *           all the contexts in the array (an AVCodecContext per RTP stream)<br>
	 *           must contain only one AVStream.<br>
	 * @param n_files number of AVCodecContexts contained in ac<br>
	 * @param buf buffer where the SDP will be stored (must be allocated by<br>
	 *            the caller)<br>
	 * @param size the size of the buffer<br>
	 * @return 0 if OK, AVERROR_xxx on error<br>
	 * Original signature : <code>int av_sdp_create(AVFormatContext*[], int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1212</i><br>
	 * @deprecated use the safer methods {@link #av_sdp_create(org.ffmpeg.avformat57.AVFormatContext.ByReference[], int, ByteBuffer, int)} and {@link #av_sdp_create(org.ffmpeg.avformat57.AVFormatContext.ByReference[], int, Pointer, int)} instead
	 */
	@Deprecated 
	int av_sdp_create(PointerByReference ac, int n_files, Pointer buf, int size);
	/**
	 * Generate an SDP for an RTP session.<br>
	 * Note, this overwrites the id values of AVStreams in the muxer contexts<br>
	 * for getting unique dynamic payload types.<br>
	 * @param ac array of AVFormatContexts describing the RTP streams. If the<br>
	 *           array is composed by only one context, such context can contain<br>
	 *           multiple AVStreams (one AVStream per RTP stream). Otherwise,<br>
	 *           all the contexts in the array (an AVCodecContext per RTP stream)<br>
	 *           must contain only one AVStream.<br>
	 * @param n_files number of AVCodecContexts contained in ac<br>
	 * @param buf buffer where the SDP will be stored (must be allocated by<br>
	 *            the caller)<br>
	 * @param size the size of the buffer<br>
	 * @return 0 if OK, AVERROR_xxx on error<br>
	 * Original signature : <code>int av_sdp_create(AVFormatContext*[], int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1212</i>
	 */
	int av_sdp_create(AVFormatContext.ByReference ac[], int n_files, ByteBuffer buf, int size);
	/**
	 * Generate an SDP for an RTP session.<br>
	 * Note, this overwrites the id values of AVStreams in the muxer contexts<br>
	 * for getting unique dynamic payload types.<br>
	 * @param ac array of AVFormatContexts describing the RTP streams. If the<br>
	 *           array is composed by only one context, such context can contain<br>
	 *           multiple AVStreams (one AVStream per RTP stream). Otherwise,<br>
	 *           all the contexts in the array (an AVCodecContext per RTP stream)<br>
	 *           must contain only one AVStream.<br>
	 * @param n_files number of AVCodecContexts contained in ac<br>
	 * @param buf buffer where the SDP will be stored (must be allocated by<br>
	 *            the caller)<br>
	 * @param size the size of the buffer<br>
	 * @return 0 if OK, AVERROR_xxx on error<br>
	 * Original signature : <code>int av_sdp_create(AVFormatContext*[], int, char*, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1212</i>
	 */
	int av_sdp_create(AVFormatContext.ByReference ac[], int n_files, Pointer buf, int size);
	/**
	 * Return a positive value if the given filename has one of the given<br>
	 * extensions, 0 otherwise.<br>
	 * @param filename   file name to check against the given extensions<br>
	 * @param extensions a comma-separated list of filename extensions<br>
	 * Original signature : <code>int av_match_ext(const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1220</i><br>
	 * @deprecated use the safer methods {@link #av_match_ext(String, String)} and {@link #av_match_ext(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int av_match_ext(Pointer filename, Pointer extensions);
	/**
	 * Return a positive value if the given filename has one of the given<br>
	 * extensions, 0 otherwise.<br>
	 * @param filename   file name to check against the given extensions<br>
	 * @param extensions a comma-separated list of filename extensions<br>
	 * Original signature : <code>int av_match_ext(const char*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1220</i>
	 */
	int av_match_ext(String filename, String extensions);
	/**
	 * Test if the given container can store a codec.<br>
	 * @param ofmt           container to check for compatibility<br>
	 * @param codec_id       codec to potentially store in container<br>
	 * @param std_compliance standards compliance level, one of FF_COMPLIANCE_*<br>
	 * @return 1 if codec with ID codec_id can be stored in ofmt, 0 if it cannot.<br>
	 *         A negative number if this information is not available.<br>
	 * Original signature : <code>int avformat_query_codec(const AVOutputFormat*, AVCodecID, int)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1230</i>
	 */
	int avformat_query_codec(AVOutputFormat ofmt, int codec_id, int std_compliance);
	/**
	 * @return the table mapping RIFF FourCCs for video to libavcodec AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_riff_video_tags()</code><br>
	 * <i>native declaration : libavformat\avformat.h:1235</i>
	 */
	AVCodecTag avformat_get_riff_video_tags();
	/**
	 * @return the table mapping RIFF FourCCs for audio to AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_riff_audio_tags()</code><br>
	 * <i>native declaration : libavformat\avformat.h:1240</i>
	 */
	AVCodecTag avformat_get_riff_audio_tags();
	/**
	 * @return the table mapping MOV FourCCs for video to libavcodec AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_mov_video_tags()</code><br>
	 * <i>native declaration : libavformat\avformat.h:1245</i>
	 */
	AVCodecTag avformat_get_mov_video_tags();
	/**
	 * @return the table mapping MOV FourCCs for audio to AVCodecID.<br>
	 * Original signature : <code>AVCodecTag* avformat_get_mov_audio_tags()</code><br>
	 * <i>native declaration : libavformat\avformat.h:1250</i>
	 */
	AVCodecTag avformat_get_mov_audio_tags();
	/**
	 * Guess the sample aspect ratio of a frame, based on both the stream and the<br>
	 * frame aspect ratio.<br>
	 * Since the frame aspect ratio is set by the codec but the stream aspect ratio<br>
	 * is set by the demuxer, these two may not be equal. This function tries to<br>
	 * return the value that you should use if you would like to display the frame.<br>
	 * Basic logic is to use the stream aspect ratio if it is set to something sane<br>
	 * otherwise use the frame aspect ratio. This way a container setting, which is<br>
	 * usually easy to modify can override the coded value in the frames.<br>
	 * @param format the format context which the stream is part of<br>
	 * @param stream the stream which the frame is part of<br>
	 * @param frame the frame with the aspect ratio to be determined<br>
	 * @return the guessed (valid) sample_aspect_ratio, 0/1 if no idea<br>
	 * Original signature : <code>AVRational av_guess_sample_aspect_ratio(AVFormatContext*, AVStream*, AVFrame*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1266</i>
	 */
	ByValue av_guess_sample_aspect_ratio(AVFormatContext format, AVStream stream, AVFrame frame);
	/**
	 * Guess the frame rate, based on both the container and codec information.<br>
	 * @param ctx the format context which the stream is part of<br>
	 * @param stream the stream which the frame is part of<br>
	 * @param frame the frame for which the frame rate should be determined, may be NULL<br>
	 * @return the guessed (valid) frame rate, 0/1 if no idea<br>
	 * Original signature : <code>AVRational av_guess_frame_rate(AVFormatContext*, AVStream*, AVFrame*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1275</i>
	 */
	ByValue av_guess_frame_rate(AVFormatContext ctx, AVStream stream, AVFrame frame);
	/**
	 * Check if the stream st contained in s is matched by the stream specifier<br>
	 * spec.<br>
	 * See the "stream specifiers" chapter in the documentation for the syntax<br>
	 * of spec.<br>
	 * @return  >0 if st is matched by spec;<br>
	 *          0  if st is not matched by spec;<br>
	 *          AVERROR code if spec is invalid<br>
	 * @note  A stream specifier can match several streams in the format.<br>
	 * Original signature : <code>int avformat_match_stream_specifier(AVFormatContext*, AVStream*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1287</i><br>
	 * @deprecated use the safer methods {@link #avformat_match_stream_specifier(org.ffmpeg.avformat57.AVFormatContext, org.ffmpeg.avformat57.AVStream, String)} and {@link #avformat_match_stream_specifier(org.ffmpeg.avformat57.AVFormatContext, org.ffmpeg.avformat57.AVStream, Pointer)} instead
	 */
	@Deprecated 
	int avformat_match_stream_specifier(AVFormatContext s, AVStream st, Pointer spec);
	/**
	 * Check if the stream st contained in s is matched by the stream specifier<br>
	 * spec.<br>
	 * See the "stream specifiers" chapter in the documentation for the syntax<br>
	 * of spec.<br>
	 * @return  >0 if st is matched by spec;<br>
	 *          0  if st is not matched by spec;<br>
	 *          AVERROR code if spec is invalid<br>
	 * @note  A stream specifier can match several streams in the format.<br>
	 * Original signature : <code>int avformat_match_stream_specifier(AVFormatContext*, AVStream*, const char*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1287</i>
	 */
	int avformat_match_stream_specifier(AVFormatContext s, AVStream st, String spec);
	/**
	 * Original signature : <code>int avformat_queue_attached_pictures(AVFormatContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1289</i>
	 */
	int avformat_queue_attached_pictures(AVFormatContext s);
	/**
	 * Apply a list of bitstream filters to a packet.<br>
	 * @param codec AVCodecContext, usually from an AVStream<br>
	 * @param pkt the packet to apply filters to. If, on success, the returned<br>
	 *        packet has size == 0 and side_data_elems == 0, it indicates that<br>
	 *        the packet should be dropped<br>
	 * @param bsfc a NULL-terminated list of filters to apply<br>
	 * @return  >=0 on success;<br>
	 *          AVERROR code on failure<br>
	 * Original signature : <code>int av_apply_bitstream_filters(AVCodecContext*, AVPacket*, AVBitStreamFilterContext*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1301</i>
	 */
	int av_apply_bitstream_filters(AVCodecContext codec, AVPacket pkt, AVBitStreamFilterContext bsfc);
	/**
	 * Transfer internal timing information from one stream to another.<br>
	 * This function is useful when doing stream copy.<br>
	 * @param ofmt     target output format for ost<br>
	 * @param ost      output stream which needs timings copy and adjustments<br>
	 * @param ist      reference input stream to copy timings from<br>
	 * @param copy_tb  define from where the stream codec timebase needs to be imported<br>
	 * Original signature : <code>int avformat_transfer_internal_stream_timing_info(const AVOutputFormat*, AVStream*, const AVStream*, AVTimebaseSource)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1317</i>
	 */
	int avformat_transfer_internal_stream_timing_info(AVOutputFormat ofmt, AVStream ost, AVStream ist, int copy_tb);
	/**
	 * Get the internal codec timebase from a stream.<br>
	 * @param st  input stream to extract the timebase from<br>
	 * Original signature : <code>AVRational av_stream_get_codec_timebase(const AVStream*)</code><br>
	 * <i>native declaration : libavformat\avformat.h:1323</i>
	 */
	ByValue av_stream_get_codec_timebase(AVStream st);
	public static class AVBPrint extends PointerType {
		public AVBPrint(Pointer address) {
			super(address);
		}
		public AVBPrint() {
			super();
		}
	};
	public static class FILE extends PointerType {
		public FILE(Pointer address) {
			super(address);
		}
		public FILE() {
			super();
		}
	};
}
