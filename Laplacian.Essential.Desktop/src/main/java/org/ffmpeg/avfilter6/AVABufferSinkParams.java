package org.ffmpeg.avfilter6;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavfilter\buffersink.h:37</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVABufferSinkParams extends Structure {
	/**
	 * < list of allowed sample formats, terminated by AV_SAMPLE_FMT_NONE<br>
	 * C type : AVSampleFormat*
	 */
	public IntByReference sample_fmts;
	/**
	 * < list of allowed channel layouts, terminated by -1<br>
	 * C type : const int64_t*
	 */
	public LongByReference channel_layouts;
	/**
	 * < list of allowed channel counts, terminated by -1<br>
	 * C type : const int*
	 */
	public IntByReference channel_counts;
	/** < if not 0, accept any channel count or layout */
	public int all_channel_counts;
	/**
	 * < list of allowed sample rates, terminated by -1<br>
	 * C type : int*
	 */
	public IntByReference sample_rates;
	public AVABufferSinkParams() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("sample_fmts", "channel_layouts", "channel_counts", "all_channel_counts", "sample_rates");
	}
	/**
	 * @param sample_fmts < list of allowed sample formats, terminated by AV_SAMPLE_FMT_NONE<br>
	 * C type : AVSampleFormat*<br>
	 * @param channel_layouts < list of allowed channel layouts, terminated by -1<br>
	 * C type : const int64_t*<br>
	 * @param channel_counts < list of allowed channel counts, terminated by -1<br>
	 * C type : const int*<br>
	 * @param all_channel_counts < if not 0, accept any channel count or layout<br>
	 * @param sample_rates < list of allowed sample rates, terminated by -1<br>
	 * C type : int*
	 */
	public AVABufferSinkParams(IntByReference sample_fmts, LongByReference channel_layouts, IntByReference channel_counts, int all_channel_counts, IntByReference sample_rates) {
		super();
		this.sample_fmts = sample_fmts;
		this.channel_layouts = channel_layouts;
		this.channel_counts = channel_counts;
		this.all_channel_counts = all_channel_counts;
		this.sample_rates = sample_rates;
	}
	public AVABufferSinkParams(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVABufferSinkParams implements Structure.ByReference {
		
	};
	public static class ByValue extends AVABufferSinkParams implements Structure.ByValue {
		
	};
}
