package org.ffmpeg.postproc54;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
/**
 * JNA Wrapper for library <b>postproc-54</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Postproc54Library extends Library {
	public static final String JNA_LIBRARY_NAME = "postproc-54";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Postproc54Library.JNA_LIBRARY_NAME);
	public static final Postproc54Library INSTANCE = (Postproc54Library)Native.loadLibrary(Postproc54Library.JNA_LIBRARY_NAME, Postproc54Library.class);
	/**
	 * Conversion Error : a.num<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil\rational.h:0</i><br>
	 * const int64_t tmp = a.num * (int64_t)b.den - b.num * (int64_t)a.den;
	 */
	/** <i>native declaration : .\libpostproc\version.h</i> */
	public static final int LIBPOSTPROC_VERSION_MAJOR = (int)54;
	/** <i>native declaration : .\libpostproc\version.h</i> */
	public static final int LIBPOSTPROC_VERSION_MINOR = (int)5;
	/** <i>native declaration : .\libpostproc\version.h</i> */
	public static final int LIBPOSTPROC_VERSION_MICRO = (int)100;
	/** <i>native declaration : .\libpostproc\version.h</i> */
	public static final int LIBPOSTPROC_VERSION_INT = (int)((54) << 16 | (5) << 8 | (100));
	/**
	 * define<br>
	 * Conversion Error : 54.5.<br>
	 * SKIPPED:<br>
	 * <i>native declaration : .\libpostproc\version.h:0</i><br>
	 * 54.5.
	 */
	/** <i>native declaration : .\libpostproc\version.h</i> */
	public static final int LIBPOSTPROC_BUILD = (int)((54) << 16 | (5) << 8 | (100));
	/** <i>native declaration : .\libpostproc\version.h</i> */
	public static final String LIBPOSTPROC_IDENT = (String)"postproc54.5.100";
	/** <i>native declaration : .\libpostproc\version.h</i> */
	public static final boolean FF_API_QP_TYPE = (boolean)(54 < 55);
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_QUALITY_MAX = (int)6;
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_CPU_CAPS_MMX = (int)0x80000000;
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_CPU_CAPS_MMX2 = (int)0x20000000;
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_CPU_CAPS_3DNOW = (int)0x40000000;
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_CPU_CAPS_ALTIVEC = (int)0x10000000;
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_CPU_CAPS_AUTO = (int)0x00080000;
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_FORMAT = (int)0x00000008;
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_FORMAT_420 = (int)(0x00000011 | 0x00000008);
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_FORMAT_422 = (int)(0x00000001 | 0x00000008);
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_FORMAT_411 = (int)(0x00000002 | 0x00000008);
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_FORMAT_444 = (int)(0x00000000 | 0x00000008);
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_FORMAT_440 = (int)(0x00000010 | 0x00000008);
	/** <i>native declaration : libpostproc\postprocess.h</i> */
	public static final int PP_PICT_TYPE_QP2 = (int)0x00000010;
	/**
	 * Return the LIBPOSTPROC_VERSION_INT constant.<br>
	 * Original signature : <code>int postproc_version()</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:4</i>
	 */
	int postproc_version();
	/**
	 * Return the libpostproc build-time configuration.<br>
	 * Original signature : <code>char* postproc_configuration()</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:9</i>
	 */
	String postproc_configuration();
	/**
	 * Return the libpostproc license.<br>
	 * Original signature : <code>char* postproc_license()</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:14</i>
	 */
	String postproc_license();
	/**
	 * Original signature : <code>void pp_postprocess(const uint8_t*[3], const int[3], uint8_t*[3], const int[3], int, int, const int8_t*, int, pp_mode*, pp_context*, int)</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:5</i><br>
	 * @deprecated use the safer methods {@link #pp_postprocess(byte[], int[], ByteBuffer[], int[], int, int, byte[], int, org.ffmpeg.postproc54.Postproc54Library.pp_mode, org.ffmpeg.postproc54.Postproc54Library.pp_context, int)} and {@link #pp_postprocess(PointerByReference, IntByReference, PointerByReference, IntByReference, int, int, Pointer, int, org.ffmpeg.postproc54.Postproc54Library.pp_mode, org.ffmpeg.postproc54.Postproc54Library.pp_context, int)} instead
	 */
	@Deprecated 
	void pp_postprocess(PointerByReference src, IntByReference srcStride, PointerByReference dst, IntByReference dstStride, int horizontalSize, int verticalSize, Pointer QP_store, int QP_stride, pp_mode mode, pp_context ppContext, int pict_type);
	/**
	 * Original signature : <code>void pp_postprocess(const uint8_t*[3], const int[3], uint8_t*[3], const int[3], int, int, const int8_t*, int, pp_mode*, pp_context*, int)</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:5</i>
	 */
	void pp_postprocess(byte src[], int srcStride[], ByteBuffer dst[], int dstStride[], int horizontalSize, int verticalSize, byte QP_store[], int QP_stride, pp_mode mode, pp_context ppContext, int pict_type);
	/**
	 * Return a pp_mode or NULL if an error occurred.<br>
	 * @param name    the string after "-pp" on the command line<br>
	 * @param quality a number from 0 to PP_QUALITY_MAX<br>
	 * Original signature : <code>pp_mode* pp_get_mode_by_name_and_quality(const char*, int)</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:12</i><br>
	 * @deprecated use the safer methods {@link #pp_get_mode_by_name_and_quality(String, int)} and {@link #pp_get_mode_by_name_and_quality(Pointer, int)} instead
	 */
	@Deprecated 
	pp_mode pp_get_mode_by_name_and_quality(Pointer name, int quality);
	/**
	 * Return a pp_mode or NULL if an error occurred.<br>
	 * @param name    the string after "-pp" on the command line<br>
	 * @param quality a number from 0 to PP_QUALITY_MAX<br>
	 * Original signature : <code>pp_mode* pp_get_mode_by_name_and_quality(const char*, int)</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:12</i>
	 */
	pp_mode pp_get_mode_by_name_and_quality(String name, int quality);
	/**
	 * Original signature : <code>void pp_free_mode(pp_mode*)</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:14</i>
	 */
	void pp_free_mode(pp_mode mode);
	/**
	 * Original signature : <code>pp_context* pp_get_context(int, int, int)</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:16</i>
	 */
	pp_context pp_get_context(int width, int height, int flags);
	/**
	 * Original signature : <code>void pp_free_context(pp_context*)</code><br>
	 * <i>native declaration : libpostproc\postprocess.h:18</i>
	 */
	void pp_free_context(pp_context ppContext);
	public static class pp_mode extends PointerType {
		public pp_mode(Pointer address) {
			super(address);
		}
		public pp_mode() {
			super();
		}
	};
	public static class pp_context extends PointerType {
		public pp_context(Pointer address) {
			super(address);
		}
		public pp_context() {
			super();
		}
	};
}
