package org.ffmpeg.avutil55;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavutil\frame.h:132</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVFrame extends Structure {
	/** C type : uint8_t*[8] */
	public Pointer[] data = new Pointer[8];
	/** C type : int[8] */
	public int[] linesize = new int[8];
	/** C type : uint8_t** */
	public PointerByReference extended_data;
	public int width;
	public int height;
	public int nb_samples;
	public int format;
	public int key_frame;
	/**
	 * @see AVPictureType<br>
	 * C type : AVPictureType
	 */
	public int pict_type;
	/** C type : AVRational */
	public AVRational sample_aspect_ratio;
	public long pts;
	public long pkt_pts;
	public long pkt_dts;
	public int coded_picture_number;
	public int display_picture_number;
	public int quality;
	/** C type : void* */
	public Pointer opaque;
	/** C type : uint64_t[8] */
	public long[] error = new long[8];
	public int repeat_pict;
	public int interlaced_frame;
	public int top_field_first;
	public int palette_has_changed;
	public long reordered_opaque;
	public int sample_rate;
	public long channel_layout;
	/** C type : AVBufferRef*[8] */
	public org.ffmpeg.avutil55.AVBufferRef.ByReference[] buf = new org.ffmpeg.avutil55.AVBufferRef.ByReference[8];
	/** C type : AVBufferRef** */
	public Pointer extended_buf;
	public int nb_extended_buf;
	/** C type : AVFrameSideData** */
	public Pointer side_data;
	public int nb_side_data;
	public int flags;
	/**
	 * @see AVColorRange<br>
	 * C type : AVColorRange
	 */
	public int color_range;
	/**
	 * @see AVColorPrimaries<br>
	 * C type : AVColorPrimaries
	 */
	public int color_primaries;
	/**
	 * @see AVColorTransferCharacteristic<br>
	 * C type : AVColorTransferCharacteristic
	 */
	public int color_trc;
	/**
	 * @see AVColorSpace<br>
	 * C type : AVColorSpace
	 */
	public int colorspace;
	/**
	 * @see AVChromaLocation<br>
	 * C type : AVChromaLocation
	 */
	public int chroma_location;
	public long best_effort_timestamp;
	public long pkt_pos;
	public long pkt_duration;
	/** C type : AVDictionary* */
	public Pointer metadata;
	public int decode_error_flags;
	public int channels;
	public int pkt_size;
	/** C type : int8_t* */
	public Pointer qscale_table;
	public int qstride;
	public int qscale_type;
	/** C type : AVBufferRef* */
	public Pointer qp_table_buf;
	/** C type : AVBufferRef* */
	public Pointer hw_frames_ctx;
	/** C type : AVBufferRef* */
	public Pointer opaque_ref;
	public AVFrame() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("data", "linesize", "extended_data", "width", "height", "nb_samples", "format", "key_frame", "pict_type", "sample_aspect_ratio", "pts", "pkt_pts", "pkt_dts", "coded_picture_number", "display_picture_number", "quality", "opaque", "error", "repeat_pict", "interlaced_frame", "top_field_first", "palette_has_changed", "reordered_opaque", "sample_rate", "channel_layout", "buf", "extended_buf", "nb_extended_buf", "side_data", "nb_side_data", "flags", "color_range", "color_primaries", "color_trc", "colorspace", "chroma_location", "best_effort_timestamp", "pkt_pos", "pkt_duration", "metadata", "decode_error_flags", "channels", "pkt_size", "qscale_table", "qstride", "qscale_type", "qp_table_buf", "hw_frames_ctx", "opaque_ref");
	}
	public AVFrame(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVFrame implements Structure.ByReference {
		
	};
	public static class ByValue extends AVFrame implements Structure.ByValue {
		
	};
}
