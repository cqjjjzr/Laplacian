package org.ffmpeg.avfilter;
import org.bridj.BridJ;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.util.DefaultParameterizedType;
import org.ffmpeg.avutil.AVClass;
import org.ffmpeg.avutil.AVDictionary;
/**
 * <i>native declaration : libavfilter\avfilter.h:81</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("avfilter-6") 
public class AVFilter extends StructObject {
	static {
		BridJ.register();
	}
	/** C type : const char* */
	@Field(0) 
	public Pointer<Byte > name() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : const char* */
	@Field(0) 
	public AVFilter name(Pointer<Byte > name) {
		this.io.setPointerField(this, 0, name);
		return this;
	}
	/** C type : const char* */
	@Field(1) 
	public Pointer<Byte > description() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : const char* */
	@Field(1) 
	public AVFilter description(Pointer<Byte > description) {
		this.io.setPointerField(this, 1, description);
		return this;
	}
	/** C type : const AVFilterPad* */
	@Field(2) 
	public Pointer<AVFilterPad > inputs() {
		return this.io.getPointerField(this, 2);
	}
	/** C type : const AVFilterPad* */
	@Field(2) 
	public AVFilter inputs(Pointer<AVFilterPad > inputs) {
		this.io.setPointerField(this, 2, inputs);
		return this;
	}
	/** C type : const AVFilterPad* */
	@Field(3) 
	public Pointer<AVFilterPad > outputs() {
		return this.io.getPointerField(this, 3);
	}
	/** C type : const AVFilterPad* */
	@Field(3) 
	public AVFilter outputs(Pointer<AVFilterPad > outputs) {
		this.io.setPointerField(this, 3, outputs);
		return this;
	}
	/** C type : const AVClass* */
	@Field(4) 
	public Pointer<AVClass > priv_class() {
		return this.io.getPointerField(this, 4);
	}
	/** C type : const AVClass* */
	@Field(4) 
	public AVFilter priv_class(Pointer<AVClass > priv_class) {
		this.io.setPointerField(this, 4, priv_class);
		return this;
	}
	@Field(5) 
	public int flags() {
		return this.io.getIntField(this, 5);
	}
	@Field(5) 
	public AVFilter flags(int flags) {
		this.io.setIntField(this, 5, flags);
		return this;
	}
	/** C type : init_callback* */
	@Field(6) 
	public Pointer<init_callback > init() {
		return this.io.getPointerField(this, 6);
	}
	/** C type : init_callback* */
	@Field(6) 
	public AVFilter init(Pointer<init_callback > init) {
		this.io.setPointerField(this, 6, init);
		return this;
	}
	/** C type : init_dict_callback* */
	@Field(7) 
	public Pointer<init_dict_callback > init_dict() {
		return this.io.getPointerField(this, 7);
	}
	/** C type : init_dict_callback* */
	@Field(7) 
	public AVFilter init_dict(Pointer<init_dict_callback > init_dict) {
		this.io.setPointerField(this, 7, init_dict);
		return this;
	}
	/** C type : uninit_callback* */
	@Field(8) 
	public Pointer<uninit_callback > uninit() {
		return this.io.getPointerField(this, 8);
	}
	/** C type : uninit_callback* */
	@Field(8) 
	public AVFilter uninit(Pointer<uninit_callback > uninit) {
		this.io.setPointerField(this, 8, uninit);
		return this;
	}
	/** C type : query_formats_callback* */
	@Field(9) 
	public Pointer<query_formats_callback > query_formats() {
		return this.io.getPointerField(this, 9);
	}
	/** C type : query_formats_callback* */
	@Field(9) 
	public AVFilter query_formats(Pointer<query_formats_callback > query_formats) {
		this.io.setPointerField(this, 9, query_formats);
		return this;
	}
	/** < size of private data to allocate for the filter */
	@Field(10) 
	public int priv_size() {
		return this.io.getIntField(this, 10);
	}
	/** < size of private data to allocate for the filter */
	@Field(10) 
	public AVFilter priv_size(int priv_size) {
		this.io.setIntField(this, 10, priv_size);
		return this;
	}
	/** < Additional flags for avfilter internal use only. */
	@Field(11) 
	public int flags_internal() {
		return this.io.getIntField(this, 11);
	}
	/** < Additional flags for avfilter internal use only. */
	@Field(11) 
	public AVFilter flags_internal(int flags_internal) {
		this.io.setIntField(this, 11, flags_internal);
		return this;
	}
	/** C type : AVFilter* */
	@Field(12) 
	public Pointer<AVFilter > next() {
		return this.io.getPointerField(this, 12);
	}
	/** C type : AVFilter* */
	@Field(12) 
	public AVFilter next(Pointer<AVFilter > next) {
		this.io.setPointerField(this, 12, next);
		return this;
	}
	/** C type : process_command_callback* */
	@Field(13) 
	public Pointer<process_command_callback > process_command() {
		return this.io.getPointerField(this, 13);
	}
	/** C type : process_command_callback* */
	@Field(13) 
	public AVFilter process_command(Pointer<process_command_callback > process_command) {
		this.io.setPointerField(this, 13, process_command);
		return this;
	}
	/** C type : init_opaque_callback* */
	@Field(14) 
	public Pointer<init_opaque_callback > init_opaque() {
		return this.io.getPointerField(this, 14);
	}
	/** C type : init_opaque_callback* */
	@Field(14) 
	public AVFilter init_opaque(Pointer<init_opaque_callback > init_opaque) {
		this.io.setPointerField(this, 14, init_opaque);
		return this;
	}
	/** C type : activate_callback* */
	@Field(15) 
	public Pointer<activate_callback > activate() {
		return this.io.getPointerField(this, 15);
	}
	/** C type : activate_callback* */
	@Field(15) 
	public AVFilter activate(Pointer<activate_callback > activate) {
		this.io.setPointerField(this, 15, activate);
		return this;
	}
	/** <i>native declaration : libavfilter\avfilter.h:74</i> */
	public static abstract class init_callback extends Callback<init_callback > {
		public int apply(Pointer<AVFilterContext > ctx) {
			return apply(Pointer.getPeer(ctx));
		}
		public int apply(@Ptr long ctx) {
			return apply((Pointer)Pointer.pointerToAddress(ctx, AVFilterContext.class));
		}
	};
	/** <i>native declaration : libavfilter\avfilter.h:75</i> */
	public static abstract class init_dict_callback extends Callback<init_dict_callback > {
		public int apply(Pointer<AVFilterContext > ctx, Pointer<Pointer<AVDictionary > > options) {
			return apply(Pointer.getPeer(ctx), Pointer.getPeer(options));
		}
		public int apply(@Ptr long ctx, @Ptr long options) {
			return apply((Pointer)Pointer.pointerToAddress(ctx, AVFilterContext.class), (Pointer)Pointer.pointerToAddress(options, DefaultParameterizedType.paramType(Pointer.class, AVDictionary.class)));
		}
	};
	/** <i>native declaration : libavfilter\avfilter.h:76</i> */
	public static abstract class uninit_callback extends Callback<uninit_callback > {
		public void apply(Pointer<AVFilterContext > ctx) {
			apply(Pointer.getPeer(ctx));
		}
		public void apply(@Ptr long ctx) {
			apply((Pointer)Pointer.pointerToAddress(ctx, AVFilterContext.class));
		}
	};
	/** <i>native declaration : libavfilter\avfilter.h:77</i> */
	public static abstract class query_formats_callback extends Callback<query_formats_callback > {
		public int apply(Pointer<AVFilterContext > AVFilterContextPtr1) {
			return apply(Pointer.getPeer(AVFilterContextPtr1));
		}
		public int apply(@Ptr long AVFilterContextPtr1) {
			return apply((Pointer)Pointer.pointerToAddress(AVFilterContextPtr1, AVFilterContext.class));
		}
	};
	/** <i>native declaration : libavfilter\avfilter.h:78</i> */
	public static abstract class process_command_callback extends Callback<process_command_callback > {
		public int apply(Pointer<AVFilterContext > AVFilterContextPtr1, Pointer<Byte > cmd, Pointer<Byte > arg, Pointer<Byte > res, int res_len, int flags) {
			return apply(Pointer.getPeer(AVFilterContextPtr1), Pointer.getPeer(cmd), Pointer.getPeer(arg), Pointer.getPeer(res), res_len, flags);
		}
		public int apply(@Ptr long AVFilterContextPtr1, @Ptr long cmd, @Ptr long arg, @Ptr long res, int res_len, int flags) {
			return apply((Pointer)Pointer.pointerToAddress(AVFilterContextPtr1, AVFilterContext.class), (Pointer)Pointer.pointerToAddress(cmd, Byte.class), (Pointer)Pointer.pointerToAddress(arg, Byte.class), (Pointer)Pointer.pointerToAddress(res, Byte.class), res_len, flags);
		}
	};
	/** <i>native declaration : libavfilter\avfilter.h:79</i> */
	public static abstract class init_opaque_callback extends Callback<init_opaque_callback > {
		public int apply(Pointer<AVFilterContext > ctx, Pointer<? > opaque) {
			return apply(Pointer.getPeer(ctx), Pointer.getPeer(opaque));
		}
		public int apply(@Ptr long ctx, @Ptr long opaque) {
			return apply((Pointer)Pointer.pointerToAddress(ctx, AVFilterContext.class), Pointer.pointerToAddress(opaque));
		}
	};
	/** <i>native declaration : libavfilter\avfilter.h:80</i> */
	public static abstract class activate_callback extends Callback<activate_callback > {
		public int apply(Pointer<AVFilterContext > ctx) {
			return apply(Pointer.getPeer(ctx));
		}
		public int apply(@Ptr long ctx) {
			return apply((Pointer)Pointer.pointerToAddress(ctx, AVFilterContext.class));
		}
	};
	public AVFilter() {
		super();
	}
	public AVFilter(Pointer pointer) {
		super(pointer);
	}
}
