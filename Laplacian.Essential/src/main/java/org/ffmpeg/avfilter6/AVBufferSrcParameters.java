package org.ffmpeg.avfilter6;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import org.ffmpeg.avutil55.AVRational;
/**
 * <i>native declaration : libavfilter\buffersrc.h:34</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVBufferSrcParameters extends Structure {
	public int format;
	/** C type : AVRational */
	public AVRational time_base;
	public int width;
	public int height;
	/** C type : AVRational */
	public AVRational sample_aspect_ratio;
	/** C type : AVRational */
	public AVRational frame_rate;
	/** C type : AVBufferRef* */
	public org.ffmpeg.avutil55.AVBufferRef.ByReference hw_frames_ctx;
	public int sample_rate;
	public long channel_layout;
	public AVBufferSrcParameters() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("format", "time_base", "width", "height", "sample_aspect_ratio", "frame_rate", "hw_frames_ctx", "sample_rate", "channel_layout");
	}
	/**
	 * @param time_base C type : AVRational<br>
	 * @param sample_aspect_ratio C type : AVRational<br>
	 * @param frame_rate C type : AVRational<br>
	 * @param hw_frames_ctx C type : AVBufferRef*
	 */
	public AVBufferSrcParameters(int format, AVRational time_base, int width, int height, AVRational sample_aspect_ratio, AVRational frame_rate, org.ffmpeg.avutil55.AVBufferRef.ByReference hw_frames_ctx, int sample_rate, long channel_layout) {
		super();
		this.format = format;
		this.time_base = time_base;
		this.width = width;
		this.height = height;
		this.sample_aspect_ratio = sample_aspect_ratio;
		this.frame_rate = frame_rate;
		this.hw_frames_ctx = hw_frames_ctx;
		this.sample_rate = sample_rate;
		this.channel_layout = channel_layout;
	}
	public AVBufferSrcParameters(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVBufferSrcParameters implements Structure.ByReference {
		
	};
	public static class ByValue extends AVBufferSrcParameters implements Structure.ByValue {
		
	};
}
