package org.ffmpeg.avfilter6;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavfilter\avfilter.h:81</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVFilter extends Structure {
	/** C type : const char* */
	public Pointer name;
	/** C type : const char* */
	public Pointer description;
	/** C type : const AVFilterPad* */
	public org.ffmpeg.avfilter6.AVFilterPad.ByReference inputs;
	/** C type : const AVFilterPad* */
	public org.ffmpeg.avfilter6.AVFilterPad.ByReference outputs;
	/** C type : const AVClass* */
	public Pointer priv_class;
	public int flags;
	/** C type : init_callback* */
	public init_callback init;
	/** C type : init_dict_callback* */
	public init_dict_callback init_dict;
	/** C type : uninit_callback* */
	public uninit_callback uninit;
	/** C type : query_formats_callback* */
	public query_formats_callback query_formats;
	/** < size of private data to allocate for the filter */
	public int priv_size;
	/** < Additional flags for avfilter internal use only. */
	public int flags_internal;
	/** C type : AVFilter* */
	public ByReference next;
	/** C type : process_command_callback* */
	public process_command_callback process_command;
	/** C type : init_opaque_callback* */
	public init_opaque_callback init_opaque;
	/** C type : activate_callback* */
	public activate_callback activate;
	/** <i>native declaration : libavfilter\avfilter.h:74</i> */
	public interface init_callback extends Callback {
		int apply(AVFilterContext ctx);
	};
	/** <i>native declaration : libavfilter\avfilter.h:75</i> */
	public interface init_dict_callback extends Callback {
		int apply(AVFilterContext ctx, PointerByReference options);
	};
	/** <i>native declaration : libavfilter\avfilter.h:76</i> */
	public interface uninit_callback extends Callback {
		void apply(AVFilterContext ctx);
	};
	/** <i>native declaration : libavfilter\avfilter.h:77</i> */
	public interface query_formats_callback extends Callback {
		int apply(AVFilterContext AVFilterContextPtr1);
	};
	/** <i>native declaration : libavfilter\avfilter.h:78</i> */
	public interface process_command_callback extends Callback {
		int apply(AVFilterContext AVFilterContextPtr1, Pointer cmd, Pointer arg, Pointer res, int res_len, int flags);
	};
	/** <i>native declaration : libavfilter\avfilter.h:79</i> */
	public interface init_opaque_callback extends Callback {
		int apply(AVFilterContext ctx, Pointer opaque);
	};
	/** <i>native declaration : libavfilter\avfilter.h:80</i> */
	public interface activate_callback extends Callback {
		int apply(AVFilterContext ctx);
	};
	public AVFilter() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "description", "inputs", "outputs", "priv_class", "flags", "init", "init_dict", "uninit", "query_formats", "priv_size", "flags_internal", "next", "process_command", "init_opaque", "activate");
	}
	public AVFilter(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVFilter implements Structure.ByReference {
		
	};
	public static class ByValue extends AVFilter implements Structure.ByValue {
		
	};
}
