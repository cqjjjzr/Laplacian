package org.ffmpeg.avformat57;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import org.ffmpeg.avcodec57.AVPacket;
import org.ffmpeg.avutil55.AVRational;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavformat\avformat.h:271</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVStream extends Structure {
	/** < stream index in AVFormatContext */
	public int index;
	public int id;
	/** C type : AVCodecContext* */
	public org.ffmpeg.avcodec57.AVCodecContext.ByReference codec;
	/** C type : void* */
	public Pointer priv_data;
	/** C type : AVFrac */
	public AVFrac pts;
	/** C type : AVRational */
	public AVRational time_base;
	public long start_time;
	public long duration;
	/** < number of frames in this stream if known or 0 */
	public long nb_frames;
	/** < AV_DISPOSITION_* bit field */
	public int disposition;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVDiscard<br>
	 * < Selects which packets can be discarded at will and do not need to be demuxed.<br>
	 * C type : AVDiscard
	 */
	public int discard;
	/** C type : AVRational */
	public AVRational sample_aspect_ratio;
	/** C type : AVDictionary* */
	public org.ffmpeg.avutil55.AVDictionary.ByReference metadata;
	/** C type : AVRational */
	public AVRational avg_frame_rate;
	/** C type : AVPacket */
	public AVPacket attached_pic;
	/** C type : AVPacketSideData* */
	public org.ffmpeg.avcodec57.AVPacketSideData.ByReference side_data;
	public int nb_side_data;
	public int event_flags;
	/** C type : info_struct* */
	public info_struct.ByReference info;
	/** < number of bits in pts (used for wrapping control) */
	public int pts_wrap_bits;
	public long first_dts;
	public long cur_dts;
	public long last_IP_pts;
	public int last_IP_duration;
	public int probe_packets;
	public int codec_info_nb_frames;
	/**
	 * @see AVStreamParseType<br>
	 * C type : AVStreamParseType
	 */
	public int need_parsing;
	/** C type : AVCodecParserContext* */
	public org.ffmpeg.avcodec57.AVCodecParserContext.ByReference parser;
	/** C type : AVPacketList* */
	public org.ffmpeg.avformat57.AVPacketList.ByReference last_in_packet_buffer;
	/** C type : AVProbeData */
	public AVProbeData probe_data;
	/** C type : int64_t[16 + 1] */
	public long[] pts_buffer = new long[16 + 1];
	/**
	 * < Only used if the format does not<br>
	 * support seeking natively.<br>
	 * C type : AVIndexEntry*
	 */
	public org.ffmpeg.avformat57.AVIndexEntry.ByReference index_entries;
	public int nb_index_entries;
	public int index_entries_allocated_size;
	/** C type : AVRational */
	public AVRational r_frame_rate;
	public int stream_identifier;
	public long interleaver_chunk_size;
	public long interleaver_chunk_duration;
	public int request_probe;
	public int skip_to_keyframe;
	public int skip_samples;
	public long start_skip_samples;
	public long first_discard_sample;
	public long last_discard_sample;
	public int nb_decoded_frames;
	public long mux_ts_offset;
	public long pts_wrap_reference;
	public int pts_wrap_behavior;
	public int update_initial_durations_done;
	/** C type : int64_t[16 + 1] */
	public long[] pts_reorder_error = new long[16 + 1];
	/** C type : uint8_t[16 + 1] */
	public byte[] pts_reorder_error_count = new byte[16 + 1];
	public long last_dts_for_order_check;
	public byte dts_ordered;
	public byte dts_misordered;
	public int inject_global_side_data;
	/** C type : char* */
	public Pointer recommended_encoder_configuration;
	/** C type : AVRational */
	public AVRational display_aspect_ratio;
	/** C type : FFFrac* */
	public org.ffmpeg.avformat57.FFFrac.ByReference priv_pts;
	/** C type : AVStreamInternal* */
	public org.ffmpeg.avformat57.AVStreamInternal.ByReference internal;
	/** C type : AVCodecParameters* */
	public org.ffmpeg.avcodec57.AVCodecParameters.ByReference codecpar;
	/** <i>native declaration : libavformat\avformat.h:268</i> */
	public static class info_struct extends Structure {
		public long last_dts;
		public long duration_gcd;
		public int duration_count;
		public long rfps_duration_sum;
		/** C type : double[2][(30 * 12 + 30 + 3 + 6)]* */
		public Pointer duration_error;
		public long codec_info_duration;
		public long codec_info_duration_fields;
		public int found_decoder;
		public long last_duration;
		public long fps_first_dts;
		public int fps_first_dts_idx;
		public long fps_last_dts;
		public int fps_last_dts_idx;
		public info_struct() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("last_dts", "duration_gcd", "duration_count", "rfps_duration_sum", "duration_error", "codec_info_duration", "codec_info_duration_fields", "found_decoder", "last_duration", "fps_first_dts", "fps_first_dts_idx", "fps_last_dts", "fps_last_dts_idx");
		}
		public info_struct(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends info_struct implements Structure.ByReference {
			
		};
		public static class ByValue extends info_struct implements Structure.ByValue {
			
		};
	};
	public AVStream() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("index", "id", "codec", "priv_data", "pts", "time_base", "start_time", "duration", "nb_frames", "disposition", "discard", "sample_aspect_ratio", "metadata", "avg_frame_rate", "attached_pic", "side_data", "nb_side_data", "event_flags", "info", "pts_wrap_bits", "first_dts", "cur_dts", "last_IP_pts", "last_IP_duration", "probe_packets", "codec_info_nb_frames", "need_parsing", "parser", "last_in_packet_buffer", "probe_data", "pts_buffer", "index_entries", "nb_index_entries", "index_entries_allocated_size", "r_frame_rate", "stream_identifier", "interleaver_chunk_size", "interleaver_chunk_duration", "request_probe", "skip_to_keyframe", "skip_samples", "start_skip_samples", "first_discard_sample", "last_discard_sample", "nb_decoded_frames", "mux_ts_offset", "pts_wrap_reference", "pts_wrap_behavior", "update_initial_durations_done", "pts_reorder_error", "pts_reorder_error_count", "last_dts_for_order_check", "dts_ordered", "dts_misordered", "inject_global_side_data", "recommended_encoder_configuration", "display_aspect_ratio", "priv_pts", "internal", "codecpar");
	}
	public AVStream(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVStream implements Structure.ByReference {
		
	};
	public static class ByValue extends AVStream implements Structure.ByValue {
		
	};
}
