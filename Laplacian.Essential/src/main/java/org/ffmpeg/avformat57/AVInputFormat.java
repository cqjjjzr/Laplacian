package org.ffmpeg.avformat57;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.LongByReference;
import org.ffmpeg.avcodec57.AVPacket;
import org.ffmpeg.avdevice57.AVDeviceCapabilitiesQuery;
import org.ffmpeg.avdevice57.AVDeviceInfoList;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavformat\avformat.h:149</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVInputFormat extends Structure {
	/** C type : const char* */
	public Pointer name;
	/** C type : const char* */
	public Pointer long_name;
	public int flags;
	/** C type : const char* */
	public Pointer extensions;
	/** C type : AVCodecTag** */
	public Pointer codec_tag;
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	public Pointer priv_class;
	/** C type : const char* */
	public Pointer mime_type;
	/** C type : AVInputFormat* */
	public ByReference next;
	public int raw_codec_id;
	public int priv_data_size;
	/** C type : read_probe_callback* */
	public read_probe_callback read_probe;
	/** C type : read_header_callback* */
	public read_header_callback read_header;
	/** C type : read_packet_callback* */
	public read_packet_callback read_packet;
	/** C type : read_close_callback* */
	public read_close_callback read_close;
	/** C type : read_seek_callback* */
	public read_seek_callback read_seek;
	/** C type : read_timestamp_callback* */
	public read_timestamp_callback read_timestamp;
	/** C type : read_play_callback* */
	public read_play_callback read_play;
	/** C type : read_pause_callback* */
	public read_pause_callback read_pause;
	/** C type : read_seek2_callback* */
	public read_seek2_callback read_seek2;
	/** C type : get_device_list_callback* */
	public get_device_list_callback get_device_list;
	/** C type : create_device_capabilities_callback* */
	public create_device_capabilities_callback create_device_capabilities;
	/** C type : free_device_capabilities_callback* */
	public free_device_capabilities_callback free_device_capabilities;
	/** <i>native declaration : libavformat\avformat.h:137</i> */
	public interface read_probe_callback extends Callback {
		int apply(AVProbeData AVProbeDataPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:138</i> */
	public interface read_header_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:139</i> */
	public interface read_packet_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, AVPacket pkt);
	};
	/** <i>native declaration : libavformat\avformat.h:140</i> */
	public interface read_close_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:141</i> */
	public interface read_seek_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, int stream_index, long timestamp, int flags);
	};
	/** <i>native declaration : libavformat\avformat.h:142</i> */
	public interface read_timestamp_callback extends Callback {
		long apply(AVFormatContext s, int stream_index, LongByReference pos, long pos_limit);
	};
	/** <i>native declaration : libavformat\avformat.h:143</i> */
	public interface read_play_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:144</i> */
	public interface read_pause_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat\avformat.h:145</i> */
	public interface read_seek2_callback extends Callback {
		int apply(AVFormatContext s, int stream_index, long min_ts, long ts, long max_ts, int flags);
	};
	/** <i>native declaration : libavformat\avformat.h:146</i> */
	public interface get_device_list_callback extends Callback {
		int apply(AVFormatContext s, AVDeviceInfoList device_list);
	};
	/** <i>native declaration : libavformat\avformat.h:147</i> */
	public interface create_device_capabilities_callback extends Callback {
		int apply(AVFormatContext s, AVDeviceCapabilitiesQuery caps);
	};
	/** <i>native declaration : libavformat\avformat.h:148</i> */
	public interface free_device_capabilities_callback extends Callback {
		int apply(AVFormatContext s, AVDeviceCapabilitiesQuery caps);
	};
	public AVInputFormat() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "long_name", "flags", "extensions", "codec_tag", "priv_class", "mime_type", "next", "raw_codec_id", "priv_data_size", "read_probe", "read_header", "read_packet", "read_close", "read_seek", "read_timestamp", "read_play", "read_pause", "read_seek2", "get_device_list", "create_device_capabilities", "free_device_capabilities");
	}
	public AVInputFormat(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVInputFormat implements Structure.ByReference {
		
	};
	public static class ByValue extends AVInputFormat implements Structure.ByValue {
		
	};
}
