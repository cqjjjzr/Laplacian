package org.ffmpeg.avformat57;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import org.ffmpeg.avformat57.Avformat57Library.av_format_control_message;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavformat\avformat.h:442</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVFormatContext extends Structure {
	/** C type : const AVClass* */
	public  Pointer av_class;
	/** C type : AVInputFormat* */
	public org.ffmpeg.avformat57.AVInputFormat.ByReference iformat;
	/** C type : AVOutputFormat* */
	public org.ffmpeg.avformat57.AVOutputFormat.ByReference oformat;
	/** C type : void* */
	public Pointer priv_data;
	/** C type : AVIOContext* */
	public AVIOContext.ByReference pb;
	public int ctx_flags;
	public int nb_streams;
	/** C type : AVStream** */
	public Pointer streams;
	/** C type : char[1024] */
	public byte[] filename = new byte[1024];
	public long start_time;
	public long duration;
	public long bit_rate;
	public int packet_size;
	public int max_delay;
	public int flags;
	public long probesize;
	public long max_analyze_duration;
	/** C type : const uint8_t* */
	public Pointer key;
	public int keylen;
	public int nb_programs;
	/** C type : AVProgram** */
	public Pointer programs;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int video_codec_id;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int audio_codec_id;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int subtitle_codec_id;
	public int max_index_size;
	public int max_picture_buffer;
	public int nb_chapters;
	/** C type : AVChapter** */
	public Pointer chapters;
	/** C type : AVDictionary* */
	public org.ffmpeg.avutil55.AVDictionary.ByReference metadata;
	public long start_time_realtime;
	public int fps_probe_size;
	public int error_recognition;
	/** C type : AVIOInterruptCB */
	public AVIOInterruptCB interrupt_callback;
	public int debug;
	public long max_interleave_delta;
	public int strict_std_compliance;
	public int event_flags;
	public int max_ts_probe;
	public int avoid_negative_ts;
	public int ts_id;
	public int audio_preload;
	public int max_chunk_duration;
	public int max_chunk_size;
	public int use_wallclock_as_timestamps;
	public int avio_flags;
	/**
	 * @see AVDurationEstimationMethod<br>
	 * C type : AVDurationEstimationMethod
	 */
	public int duration_estimation_method;
	public long skip_initial_bytes;
	public int correct_ts_overflow;
	public int seek2any;
	public int flush_packets;
	public int probe_score;
	public int format_probesize;
	/** C type : char* */
	public Pointer codec_whitelist;
	/** C type : char* */
	public Pointer format_whitelist;
	/** C type : AVFormatInternal* */
	public org.ffmpeg.avformat57.AVFormatInternal.ByReference internal;
	public int io_repositioned;
	/** C type : AVCodec* */
	public org.ffmpeg.avcodec57.AVCodec.ByReference video_codec;
	/** C type : AVCodec* */
	public org.ffmpeg.avcodec57.AVCodec.ByReference audio_codec;
	/** C type : AVCodec* */
	public org.ffmpeg.avcodec57.AVCodec.ByReference subtitle_codec;
	/** C type : AVCodec* */
	public org.ffmpeg.avcodec57.AVCodec.ByReference data_codec;
	public int metadata_header_padding;
	/** C type : void* */
	public Pointer opaque;
	/** C type : av_format_control_message */
	public av_format_control_message control_message_cb;
	public long output_ts_offset;
	/** C type : uint8_t* */
	public Pointer dump_separator;
	/**
	 * @see org.ffmpeg.avcodec57.Avcodec57Library#AVCodecID<br>
	 * C type : AVCodecID
	 */
	public int data_codec_id;
	/** C type : open_cb_callback* */
	public open_cb_callback open_cb;
	/** C type : char* */
	public Pointer protocol_whitelist;
	/** C type : io_open_callback* */
	public io_open_callback io_open;
	/** C type : io_close_callback* */
	public io_close_callback io_close;
	/** C type : char* */
	public Pointer protocol_blacklist;
	public int max_streams;
	/** <i>native declaration : libavformat\avformat.h:439</i> */
	public interface open_cb_callback extends Callback {
		int apply(AVFormatContext s, PointerByReference p, Pointer url, int flags, AVIOInterruptCB int_cb, PointerByReference options);
	};
	/** <i>native declaration : libavformat\avformat.h:440</i> */
	public interface io_open_callback extends Callback {
		int apply(AVFormatContext s, PointerByReference pb, Pointer url, int flags, PointerByReference options);
	};
	/** <i>native declaration : libavformat\avformat.h:441</i> */
	public interface io_close_callback extends Callback {
		void apply(AVFormatContext s, AVIOContext pb);
	};
	public AVFormatContext() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("av_class", "iformat", "oformat", "priv_data", "pb", "ctx_flags", "nb_streams", "streams", "filename", "start_time", "duration", "bit_rate", "packet_size", "max_delay", "flags", "probesize", "max_analyze_duration", "key", "keylen", "nb_programs", "programs", "video_codec_id", "audio_codec_id", "subtitle_codec_id", "max_index_size", "max_picture_buffer", "nb_chapters", "chapters", "metadata", "start_time_realtime", "fps_probe_size", "error_recognition", "interrupt_callback", "debug", "max_interleave_delta", "strict_std_compliance", "event_flags", "max_ts_probe", "avoid_negative_ts", "ts_id", "audio_preload", "max_chunk_duration", "max_chunk_size", "use_wallclock_as_timestamps", "avio_flags", "duration_estimation_method", "skip_initial_bytes", "correct_ts_overflow", "seek2any", "flush_packets", "probe_score", "format_probesize", "codec_whitelist", "format_whitelist", "internal", "io_repositioned", "video_codec", "audio_codec", "subtitle_codec", "data_codec", "metadata_header_padding", "opaque", "control_message_cb", "output_ts_offset", "dump_separator", "data_codec_id", "open_cb", "protocol_whitelist", "io_open", "io_close", "protocol_blacklist", "max_streams");
	}
	public AVFormatContext(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVFormatContext implements Structure.ByReference {
		
	};
	public static class ByValue extends AVFormatContext implements Structure.ByValue {
		
	};
}
