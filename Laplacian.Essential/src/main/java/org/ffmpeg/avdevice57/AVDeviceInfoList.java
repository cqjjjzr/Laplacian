package org.ffmpeg.avdevice57;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavdevice\avdevice.h:170</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVDeviceInfoList extends Structure {
	/**
	 * < list of autodetected devices<br>
	 * C type : AVDeviceInfo**
	 */
	public org.ffmpeg.avdevice57.AVDeviceInfo.ByReference[] devices;
	/** < number of autodetected devices */
	public int nb_devices;
	/** < index of default device or -1 if no default */
	public int default_device;
	public AVDeviceInfoList() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("devices", "nb_devices", "default_device");
	}
	/**
	 * @param devices < list of autodetected devices<br>
	 * C type : AVDeviceInfo**<br>
	 * @param nb_devices < number of autodetected devices<br>
	 * @param default_device < index of default device or -1 if no default
	 */
	public AVDeviceInfoList(org.ffmpeg.avdevice57.AVDeviceInfo.ByReference devices[], int nb_devices, int default_device) {
		super();
		if ((devices.length != this.devices.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.devices = devices;
		this.nb_devices = nb_devices;
		this.default_device = default_device;
	}
	public AVDeviceInfoList(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends AVDeviceInfoList implements Structure.ByReference {
		
	};
	public static class ByValue extends AVDeviceInfoList implements Structure.ByValue {
		
	};
}
